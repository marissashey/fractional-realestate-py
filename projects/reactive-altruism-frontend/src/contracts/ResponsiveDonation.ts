/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ResponsiveDonation","structs":{"ConditionalClauseStruct":[{"name":"clauseId","type":"uint64"},{"name":"eventId","type":"uint64"},{"name":"payoutAmount","type":"uint64"},{"name":"recipientYes","type":"address"},{"name":"recipientNo","type":"address"},{"name":"donorAddress","type":"address"},{"name":"executed","type":"bool"}],"EventStruct":[{"name":"eventId","type":"uint64"},{"name":"eventString","type":"string"},{"name":"pending","type":"bool"},{"name":"resolution","type":"bool"},{"name":"oracleAddress","type":"address"}]},"methods":[{"name":"create_event","args":[{"type":"string","name":"event_string","desc":"Description of the event (e.g., \"Hurricane hits Miami\")"},{"type":"address","name":"oracle_address","desc":"Address authorized to resolve this event"}],"returns":{"type":"uint64","desc":"The event ID of the created event (uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a new event that can be used for conditional donations.","events":[],"recommendations":{}},{"name":"instantaneous_payout","args":[{"type":"address","name":"recipient_address","desc":"Address to receive the donation (charity/recipient)"},{"type":"pay","name":"payment","desc":"The payment transaction (must be grouped with the app call)"}],"returns":{"type":"bool","desc":"True if the donation is successful"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Process an immediate donation with instant payout to recipient.\nPerfect for direct charitable giving with immediate impact.","events":[],"recommendations":{}},{"name":"create_conditional_donation","args":[{"type":"uint64","name":"event_id","desc":"The event this donation depends on"},{"type":"address","name":"recipient_yes","desc":"Address to receive funds if event resolves to true"},{"type":"address","name":"recipient_no","desc":"Address to receive funds if event resolves to false (often donor)"},{"type":"pay","name":"payment","desc":"The payment transaction (funds held in escrow)"}],"returns":{"type":"uint64","desc":"The clause ID of the created conditional donation"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a conditional donation that will pay out based on event resolution.\nExample: \"Donate $1000 to Red Cross IF hurricane hits Miami, otherwise return to me\"","events":[],"recommendations":{}},{"name":"mixed_donation","args":[{"type":"address","name":"instant_recipient","desc":"Address to receive instant donation (use zero address if no instant donation)"},{"type":"uint64","name":"instant_amount","desc":"Amount for instant donation (use 0 if no instant donation)"},{"type":"uint64","name":"event_id","desc":"Event ID for conditional donation"},{"type":"address","name":"recipient_yes","desc":"Address to receive funds if event resolves to true"},{"type":"address","name":"recipient_no","desc":"Address to receive funds if event resolves to false"},{"type":"pay","name":"payment","desc":"The payment transaction covering both donations"}],"returns":{"type":"uint64","desc":"The clause ID for the conditional donation created"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create both instantaneous and conditional donations in a single transaction.\nSimplified version that handles one conditional donation to keep it simple.","events":[],"recommendations":{}},{"name":"resolve_event","args":[{"type":"uint64","name":"event_id","desc":"The event to resolve"},{"type":"bool","name":"resolution","desc":"The outcome of the event (true/false)"}],"returns":{"type":"bool","desc":"True if the event is successfully resolved"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Resolve an event outcome. Can only be called by the authorized oracle.","events":[],"recommendations":{}},{"name":"execute_conditional_clause","args":[{"type":"uint64","name":"clause_id","desc":"The clause to execute"}],"returns":{"type":"bool","desc":"True if the clause is successfully executed"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Execute a conditional clause after its associated event has been resolved.\nCan be called by anyone to trigger payouts.","events":[],"recommendations":{}},{"name":"execute_clauses_for_event","args":[{"type":"uint64","name":"event_id","desc":"The event whose clauses should be executed"}],"returns":{"type":"uint64","desc":"Number of clauses executed"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Execute all unexecuted conditional clauses for a resolved event.\nThis is more gas-efficient than executing clauses one by one.","events":[],"recommendations":{}},{"name":"get_event_info","args":[{"type":"uint64","name":"event_id","desc":"The event ID to query"}],"returns":{"type":"(uint64,string,bool,bool,address)","struct":"EventStruct","desc":"The EventStruct containing the event's information"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get information about an event.","events":[],"recommendations":{}},{"name":"get_clause_info","args":[{"type":"uint64","name":"clause_id","desc":"The clause ID to query"}],"returns":{"type":"(uint64,uint64,uint64,address,address,address,bool)","struct":"ConditionalClauseStruct","desc":"The ConditionalClauseStruct containing the clause's information"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get information about a conditional clause.","events":[],"recommendations":{}},{"name":"get_pending_events","args":[],"returns":{"type":"uint64[]","desc":"Array of pending event IDs (empty for now - placeholder for interface)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get all pending event IDs. Oracle can use this to know which events to monitor.\nNote: This is a simplified version - in production you'd want pagination for large numbers of events.","events":[],"recommendations":{}},{"name":"get_clauses_for_event","args":[{"type":"uint64","name":"event_id","desc":"The event to get clauses for"}],"returns":{"type":"uint64[]","desc":"Array of clause IDs that depend on this event"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get all clause IDs that depend on a specific event.\nOracle can call this when resolving an event to get all clauses to execute.","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"\n    ResponsiveDonation Contract - MVP Version\n    \n    A smart contract enabling conditional charitable donations based on real-world events.\n    Perfect for disaster relief, climate action, and cause-based giving.\n    \n    Core Features:\n    1. ðŸ’° Instantaneous Donations - Direct donations with immediate payout\n    2. ðŸŽ¯ Conditional Donations - \"Donate $1000 to Red Cross IF hurricane hits Miami\"\n    3. ðŸ”® Oracle Resolution - Trusted oracles resolve event outcomes\n    4. ðŸš€ Mixed Donations - Combine instant + conditional in one transaction\n    5. ðŸ“Š Query Interface - Discover events and clauses\n    \n    Use Cases:\n    - Climate disaster relief (donate if hurricane/wildfire occurs)\n    - Charity matching (donate if fundraising goal is met)\n    - Sports betting for good (donate to charity if team wins)\n    - Political action (donate if legislation passes)\n    ","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"listed_events":{"keyType":"uint64","valueType":"EventStruct","prefix":"ZXZlbnRz"},"conditional_clauses":{"keyType":"uint64","valueType":"ConditionalClauseStruct","prefix":"Y2xhdXNlcw=="},"event_clauses":{"keyType":"uint64","valueType":"uint64[]","prefix":"ZXZlbnRfY2xhdXNlcw=="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[948],"errorMessage":"Associated event does not exist"},{"pc":[918,1260],"errorMessage":"Clause does not exist"},{"pc":[937],"errorMessage":"Clause has already been executed"},{"pc":[702],"errorMessage":"Conditional amount must be greater than 0"},{"pc":[531,737,865,1037,1245],"errorMessage":"Event does not exist"},{"pc":[543,749,879],"errorMessage":"Event has already been resolved"},{"pc":[962,1054],"errorMessage":"Event has not been resolved yet"},{"pc":[884,938,977,1014,1113,1169,1223],"errorMessage":"Index access is out of bounds"},{"pc":[503],"errorMessage":"Minimum donation is 1000 microAlgos (0.001 ALGO)"},{"pc":[153,172,190,209,228,247,271,298,339,374,408],"errorMessage":"OnCompletion is not NoOp"},{"pc":[888],"errorMessage":"Only authorized oracle can resolve event"},{"pc":[497,565,687],"errorMessage":"Payment amount must be greater than 0"},{"pc":[709],"errorMessage":"Payment amount must equal sum of donations"},{"pc":[483,551,673],"errorMessage":"Payment must be sent to contract"},{"pc":[491,559,681],"errorMessage":"Payment sender must match transaction sender"},{"pc":[435],"errorMessage":"can only call when creating"},{"pc":[156,175,193,212,231,250,274,301,342,377,411],"errorMessage":"can only call when not creating"},{"pc":[924,1139,1262],"errorMessage":"check self.conditional_clauses entry exists"},{"pc":[624,811,1081,1282],"errorMessage":"check self.event_clauses entry exists"},{"pc":[533,739,868,950,1043,1247],"errorMessage":"check self.listed_events entry exists"},{"pc":[326,361,390],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiAFAAFQUcAHJgcBAAQVH3x1BmV2ZW50cwdjbGF1c2VzDWV2ZW50X2NsYXVzZXMCAAEIAAAAAAAAAAAxG0EBa4ILBJY+ku8EhI2+UgQSBtj9BKb+00QELbaZRgS1oWfKBBU6UlwEuE4V1gR2Xg8/BMid2QIELB1tFzYaAI4LAQEA3wC8AJMAeABgAE0AOgAnABUAAiJDMRkURDEYRDYaAYgETSlMULAjQzEZFEQxGESABhUffHUAALAjQzEZFEQxGEQ2GgGIBBkpTFCwI0MxGRREMRhENhoBiAP3KUxQsCNDMRkURDEYRDYaAYgDDilMULAjQzEZFEQxGEQ2GgGIAokoIk8CVClMULAjQzEZFEQxGEQ2GgE2GgKIAjooIk8CVClMULAjQzEZFEQxGEQ2GgE2GgI2GgM2GgQ2GgUxFiMJSTgQIxJEiAFLKUxQsCNDMRkURDEYRDYaATYaAjYaAzEWIwlJOBAjEkSIAJspTFCwI0MxGRREMRhENhoBMRYjCUk4ECMSRIgATygiTwJUKUxQsCNDMRkURDEYRDYaATYaAogAESlMULAjQzEZQP7kMRgURCNDigIBMgcWSYACACtQgAGAUCUiVIv/UIv+UCpLAlBJvEhMv4mKAgGL/zgHMgoSRIv/OAAxABJEi/84CElESYHoBw9EsYv+sgeyCCOyECKyAbMjiYoEASqL/FBJvUUBRL5EJFMoIk8CVCJTRIv/OAcyChJEi/84ADEAEkSL/zgISUQxAAEyB0xRAAgXCBZJTwIWMQBLAov8UE8CUIv9UIv+UExQKFArTwJQTL8nBIv8UEm9RQFBAByLAUm+RFcCAIsAUEkVgQgKFlcGAkxQSwG8SL+JJwWLAFCLAUm8SEy/iYoGASJJi/84BzIKEkSL/zgAMQASRIv/OAhJRIv7F0lOAkoJFklOAxdJREsBCE8CEkRBABCxi/qyB4sCsggjshAisgGzKov8UEm9RQFEvkQkUygiTwJUIlNEMQABMgdMUQAIFwgjCBZJjAExAEsBi/xQiwNQi/1Qi/5QTFAoUCtPAlBMvycEi/xQSYwAvUUBQQAgiwBJvkRXAgCLAVBJFYEIChZXBgJMUEsBvEi/iwGMAIknBYsBUIsASbxITL9C/+yKAgEqi/5QSb1FAURJvkRJJFMoIk8CVCJTRDEASwFXCyASRCQiVIv/IlMlTFRLAbxIvyOJigEBK4v/UEcCvUUBRL5MSU8CREkhBFMoIk8CVCJTFERXCAgqTFBJvUUBRL5ESSRTKCJPAlQiUxREJVMoIk8CVCJTQQAliwFXGCCxiwFJgRBbTwKyB7III7IQIrIBsyEEI1SLAEy/I4wAiYsBVzggQv/YigEBIkcEgABJKov/UEm9RQFEvkxJTwJEJFMoIk8CVCJTFEQnBIv/UEm9RQFAAAUnBowAiYsIvkxJTgKMAUQnBowDIlmMBiKMBYsFiwYMQQCAiwFXAgCLBYEIC4EIWCtMUEmMAL1FAYsDjARBAE6LAL5MSU4CjAJEIQRTKCJPAlQiU0AAO4sHJVMoIk8CVCJTQQA2iwJXGCCxiwJJgRBbTwKyB7III7IQIrIBsyEEI1SLAEy/iwMXIwgWjASLBIwDiwUjCIwFQv+AiwJXOCBC/8eLA4wAiYoBASqL/1BJvUUBRL5EiYoBASuL/1BJvUUBRL5EiYoBAScEi/9QSb1FAUEABosAvkRMiYACAABMiQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ConditionalClauseStruct = {
  clauseId: bigint,
  eventId: bigint,
  payoutAmount: bigint,
  recipientYes: string,
  recipientNo: string,
  donorAddress: string,
  executed: boolean
}


/**
 * Converts the ABI tuple representation of a ConditionalClauseStruct to the struct representation
 */
export function ConditionalClauseStructFromTuple(abiTuple: [bigint, bigint, bigint, string, string, string, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ConditionalClauseStruct, APP_SPEC.structs) as ConditionalClauseStruct
}

export type EventStruct = {
  eventId: bigint,
  eventString: string,
  pending: boolean,
  resolution: boolean,
  oracleAddress: string
}


/**
 * Converts the ABI tuple representation of a EventStruct to the struct representation
 */
export function EventStructFromTuple(abiTuple: [bigint, string, boolean, boolean, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.EventStruct, APP_SPEC.structs) as EventStruct
}

/**
 * The argument types for the ResponsiveDonation contract
 */
export type ResponsiveDonationArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_event(string,address)uint64': {
      /**
       * Description of the event (e.g., "Hurricane hits Miami")
       */
      eventString: string
      /**
       * Address authorized to resolve this event
       */
      oracleAddress: string
    }
    'instantaneous_payout(address,pay)bool': {
      /**
       * Address to receive the donation (charity/recipient)
       */
      recipientAddress: string
      /**
       * The payment transaction (must be grouped with the app call)
       */
      payment: AppMethodCallTransactionArgument
    }
    'create_conditional_donation(uint64,address,address,pay)uint64': {
      /**
       * The event this donation depends on
       */
      eventId: bigint | number
      /**
       * Address to receive funds if event resolves to true
       */
      recipientYes: string
      /**
       * Address to receive funds if event resolves to false (often donor)
       */
      recipientNo: string
      /**
       * The payment transaction (funds held in escrow)
       */
      payment: AppMethodCallTransactionArgument
    }
    'mixed_donation(address,uint64,uint64,address,address,pay)uint64': {
      /**
       * Address to receive instant donation (use zero address if no instant donation)
       */
      instantRecipient: string
      /**
       * Amount for instant donation (use 0 if no instant donation)
       */
      instantAmount: bigint | number
      /**
       * Event ID for conditional donation
       */
      eventId: bigint | number
      /**
       * Address to receive funds if event resolves to true
       */
      recipientYes: string
      /**
       * Address to receive funds if event resolves to false
       */
      recipientNo: string
      /**
       * The payment transaction covering both donations
       */
      payment: AppMethodCallTransactionArgument
    }
    'resolve_event(uint64,bool)bool': {
      /**
       * The event to resolve
       */
      eventId: bigint | number
      /**
       * The outcome of the event (true/false)
       */
      resolution: boolean
    }
    'execute_conditional_clause(uint64)bool': {
      /**
       * The clause to execute
       */
      clauseId: bigint | number
    }
    'execute_clauses_for_event(uint64)uint64': {
      /**
       * The event whose clauses should be executed
       */
      eventId: bigint | number
    }
    'get_event_info(uint64)(uint64,string,bool,bool,address)': {
      /**
       * The event ID to query
       */
      eventId: bigint | number
    }
    'get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)': {
      /**
       * The clause ID to query
       */
      clauseId: bigint | number
    }
    'get_pending_events()uint64[]': Record<string, never>
    'get_clauses_for_event(uint64)uint64[]': {
      /**
       * The event to get clauses for
       */
      eventId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_event(string,address)uint64': [eventString: string, oracleAddress: string]
    'instantaneous_payout(address,pay)bool': [recipientAddress: string, payment: AppMethodCallTransactionArgument]
    'create_conditional_donation(uint64,address,address,pay)uint64': [eventId: bigint | number, recipientYes: string, recipientNo: string, payment: AppMethodCallTransactionArgument]
    'mixed_donation(address,uint64,uint64,address,address,pay)uint64': [instantRecipient: string, instantAmount: bigint | number, eventId: bigint | number, recipientYes: string, recipientNo: string, payment: AppMethodCallTransactionArgument]
    'resolve_event(uint64,bool)bool': [eventId: bigint | number, resolution: boolean]
    'execute_conditional_clause(uint64)bool': [clauseId: bigint | number]
    'execute_clauses_for_event(uint64)uint64': [eventId: bigint | number]
    'get_event_info(uint64)(uint64,string,bool,bool,address)': [eventId: bigint | number]
    'get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)': [clauseId: bigint | number]
    'get_pending_events()uint64[]': []
    'get_clauses_for_event(uint64)uint64[]': [eventId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type ResponsiveDonationReturns = {
  'create_event(string,address)uint64': bigint
  'instantaneous_payout(address,pay)bool': boolean
  'create_conditional_donation(uint64,address,address,pay)uint64': bigint
  'mixed_donation(address,uint64,uint64,address,address,pay)uint64': bigint
  'resolve_event(uint64,bool)bool': boolean
  'execute_conditional_clause(uint64)bool': boolean
  'execute_clauses_for_event(uint64)uint64': bigint
  'get_event_info(uint64)(uint64,string,bool,bool,address)': EventStruct
  'get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)': ConditionalClauseStruct
  'get_pending_events()uint64[]': bigint[]
  'get_clauses_for_event(uint64)uint64[]': bigint[]
}

/**
 * Defines the types of available calls and state of the ResponsiveDonation smart contract.
 */
export type ResponsiveDonationTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_event(string,address)uint64' | 'create_event', {
      argsObj: ResponsiveDonationArgs['obj']['create_event(string,address)uint64']
      argsTuple: ResponsiveDonationArgs['tuple']['create_event(string,address)uint64']
      /**
       * The event ID of the created event (uint64)
       */
      returns: ResponsiveDonationReturns['create_event(string,address)uint64']
    }>
    & Record<'instantaneous_payout(address,pay)bool' | 'instantaneous_payout', {
      argsObj: ResponsiveDonationArgs['obj']['instantaneous_payout(address,pay)bool']
      argsTuple: ResponsiveDonationArgs['tuple']['instantaneous_payout(address,pay)bool']
      /**
       * True if the donation is successful
       */
      returns: ResponsiveDonationReturns['instantaneous_payout(address,pay)bool']
    }>
    & Record<'create_conditional_donation(uint64,address,address,pay)uint64' | 'create_conditional_donation', {
      argsObj: ResponsiveDonationArgs['obj']['create_conditional_donation(uint64,address,address,pay)uint64']
      argsTuple: ResponsiveDonationArgs['tuple']['create_conditional_donation(uint64,address,address,pay)uint64']
      /**
       * The clause ID of the created conditional donation
       */
      returns: ResponsiveDonationReturns['create_conditional_donation(uint64,address,address,pay)uint64']
    }>
    & Record<'mixed_donation(address,uint64,uint64,address,address,pay)uint64' | 'mixed_donation', {
      argsObj: ResponsiveDonationArgs['obj']['mixed_donation(address,uint64,uint64,address,address,pay)uint64']
      argsTuple: ResponsiveDonationArgs['tuple']['mixed_donation(address,uint64,uint64,address,address,pay)uint64']
      /**
       * The clause ID for the conditional donation created
       */
      returns: ResponsiveDonationReturns['mixed_donation(address,uint64,uint64,address,address,pay)uint64']
    }>
    & Record<'resolve_event(uint64,bool)bool' | 'resolve_event', {
      argsObj: ResponsiveDonationArgs['obj']['resolve_event(uint64,bool)bool']
      argsTuple: ResponsiveDonationArgs['tuple']['resolve_event(uint64,bool)bool']
      /**
       * True if the event is successfully resolved
       */
      returns: ResponsiveDonationReturns['resolve_event(uint64,bool)bool']
    }>
    & Record<'execute_conditional_clause(uint64)bool' | 'execute_conditional_clause', {
      argsObj: ResponsiveDonationArgs['obj']['execute_conditional_clause(uint64)bool']
      argsTuple: ResponsiveDonationArgs['tuple']['execute_conditional_clause(uint64)bool']
      /**
       * True if the clause is successfully executed
       */
      returns: ResponsiveDonationReturns['execute_conditional_clause(uint64)bool']
    }>
    & Record<'execute_clauses_for_event(uint64)uint64' | 'execute_clauses_for_event', {
      argsObj: ResponsiveDonationArgs['obj']['execute_clauses_for_event(uint64)uint64']
      argsTuple: ResponsiveDonationArgs['tuple']['execute_clauses_for_event(uint64)uint64']
      /**
       * Number of clauses executed
       */
      returns: ResponsiveDonationReturns['execute_clauses_for_event(uint64)uint64']
    }>
    & Record<'get_event_info(uint64)(uint64,string,bool,bool,address)' | 'get_event_info', {
      argsObj: ResponsiveDonationArgs['obj']['get_event_info(uint64)(uint64,string,bool,bool,address)']
      argsTuple: ResponsiveDonationArgs['tuple']['get_event_info(uint64)(uint64,string,bool,bool,address)']
      /**
       * The EventStruct containing the event's information
       */
      returns: ResponsiveDonationReturns['get_event_info(uint64)(uint64,string,bool,bool,address)']
    }>
    & Record<'get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)' | 'get_clause_info', {
      argsObj: ResponsiveDonationArgs['obj']['get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)']
      argsTuple: ResponsiveDonationArgs['tuple']['get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)']
      /**
       * The ConditionalClauseStruct containing the clause's information
       */
      returns: ResponsiveDonationReturns['get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)']
    }>
    & Record<'get_pending_events()uint64[]' | 'get_pending_events', {
      argsObj: ResponsiveDonationArgs['obj']['get_pending_events()uint64[]']
      argsTuple: ResponsiveDonationArgs['tuple']['get_pending_events()uint64[]']
      /**
       * Array of pending event IDs (empty for now - placeholder for interface)
       */
      returns: ResponsiveDonationReturns['get_pending_events()uint64[]']
    }>
    & Record<'get_clauses_for_event(uint64)uint64[]' | 'get_clauses_for_event', {
      argsObj: ResponsiveDonationArgs['obj']['get_clauses_for_event(uint64)uint64[]']
      argsTuple: ResponsiveDonationArgs['tuple']['get_clauses_for_event(uint64)uint64[]']
      /**
       * Array of clause IDs that depend on this event
       */
      returns: ResponsiveDonationReturns['get_clauses_for_event(uint64)uint64[]']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    box: {
      keys: {}
      maps: {
        listedEvents: Map<bigint | number, EventStruct>
        conditionalClauses: Map<bigint | number, ConditionalClauseStruct>
        eventClauses: Map<bigint | number, bigint[]>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type ResponsiveDonationSignatures = keyof ResponsiveDonationTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ResponsiveDonationNonVoidMethodSignatures = keyof ResponsiveDonationTypes['methods'] extends infer T ? T extends keyof ResponsiveDonationTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the ResponsiveDonation smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ResponsiveDonationSignatures> = ResponsiveDonationTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ResponsiveDonation smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ResponsiveDonationSignatures> = ResponsiveDonationTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = ResponsiveDonationTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type ResponsiveDonationCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ResponsiveDonationDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ResponsiveDonationCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the ResponsiveDonation smart contract
 */
export abstract class ResponsiveDonationParamsFactory {
  /**
   * Constructs a no op call for the create_event(string,address)uint64 ABI method
   *
   * Create a new event that can be used for conditional donations.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createEvent(params: CallParams<ResponsiveDonationArgs['obj']['create_event(string,address)uint64'] | ResponsiveDonationArgs['tuple']['create_event(string,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_event(string,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.eventString, params.args.oracleAddress],
    }
  }
  /**
   * Constructs a no op call for the instantaneous_payout(address,pay)bool ABI method
   *
  * Process an immediate donation with instant payout to recipient.
  Perfect for direct charitable giving with immediate impact.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static instantaneousPayout(params: CallParams<ResponsiveDonationArgs['obj']['instantaneous_payout(address,pay)bool'] | ResponsiveDonationArgs['tuple']['instantaneous_payout(address,pay)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'instantaneous_payout(address,pay)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.recipientAddress, params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the create_conditional_donation(uint64,address,address,pay)uint64 ABI method
   *
  * Create a conditional donation that will pay out based on event resolution.
  Example: "Donate $1000 to Red Cross IF hurricane hits Miami, otherwise return to me"

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createConditionalDonation(params: CallParams<ResponsiveDonationArgs['obj']['create_conditional_donation(uint64,address,address,pay)uint64'] | ResponsiveDonationArgs['tuple']['create_conditional_donation(uint64,address,address,pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_conditional_donation(uint64,address,address,pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.eventId, params.args.recipientYes, params.args.recipientNo, params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the mixed_donation(address,uint64,uint64,address,address,pay)uint64 ABI method
   *
  * Create both instantaneous and conditional donations in a single transaction.
  Simplified version that handles one conditional donation to keep it simple.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mixedDonation(params: CallParams<ResponsiveDonationArgs['obj']['mixed_donation(address,uint64,uint64,address,address,pay)uint64'] | ResponsiveDonationArgs['tuple']['mixed_donation(address,uint64,uint64,address,address,pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mixed_donation(address,uint64,uint64,address,address,pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.instantRecipient, params.args.instantAmount, params.args.eventId, params.args.recipientYes, params.args.recipientNo, params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the resolve_event(uint64,bool)bool ABI method
   *
   * Resolve an event outcome. Can only be called by the authorized oracle.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resolveEvent(params: CallParams<ResponsiveDonationArgs['obj']['resolve_event(uint64,bool)bool'] | ResponsiveDonationArgs['tuple']['resolve_event(uint64,bool)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'resolve_event(uint64,bool)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.eventId, params.args.resolution],
    }
  }
  /**
   * Constructs a no op call for the execute_conditional_clause(uint64)bool ABI method
   *
  * Execute a conditional clause after its associated event has been resolved.
  Can be called by anyone to trigger payouts.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static executeConditionalClause(params: CallParams<ResponsiveDonationArgs['obj']['execute_conditional_clause(uint64)bool'] | ResponsiveDonationArgs['tuple']['execute_conditional_clause(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'execute_conditional_clause(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.clauseId],
    }
  }
  /**
   * Constructs a no op call for the execute_clauses_for_event(uint64)uint64 ABI method
   *
  * Execute all unexecuted conditional clauses for a resolved event.
  This is more gas-efficient than executing clauses one by one.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static executeClausesForEvent(params: CallParams<ResponsiveDonationArgs['obj']['execute_clauses_for_event(uint64)uint64'] | ResponsiveDonationArgs['tuple']['execute_clauses_for_event(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'execute_clauses_for_event(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.eventId],
    }
  }
  /**
   * Constructs a no op call for the get_event_info(uint64)(uint64,string,bool,bool,address) ABI method
   *
   * Get information about an event.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getEventInfo(params: CallParams<ResponsiveDonationArgs['obj']['get_event_info(uint64)(uint64,string,bool,bool,address)'] | ResponsiveDonationArgs['tuple']['get_event_info(uint64)(uint64,string,bool,bool,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_event_info(uint64)(uint64,string,bool,bool,address)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.eventId],
    }
  }
  /**
   * Constructs a no op call for the get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool) ABI method
   *
   * Get information about a conditional clause.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getClauseInfo(params: CallParams<ResponsiveDonationArgs['obj']['get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)'] | ResponsiveDonationArgs['tuple']['get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.clauseId],
    }
  }
  /**
   * Constructs a no op call for the get_pending_events()uint64[] ABI method
   *
  * Get all pending event IDs. Oracle can use this to know which events to monitor.
  Note: This is a simplified version - in production you'd want pagination for large numbers of events.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPendingEvents(params: CallParams<ResponsiveDonationArgs['obj']['get_pending_events()uint64[]'] | ResponsiveDonationArgs['tuple']['get_pending_events()uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_pending_events()uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_clauses_for_event(uint64)uint64[] ABI method
   *
  * Get all clause IDs that depend on a specific event.
  Oracle can call this when resolving an event to get all clauses to execute.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getClausesForEvent(params: CallParams<ResponsiveDonationArgs['obj']['get_clauses_for_event(uint64)uint64[]'] | ResponsiveDonationArgs['tuple']['get_clauses_for_event(uint64)uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_clauses_for_event(uint64)uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.eventId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ResponsiveDonation smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ResponsiveDonationFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ResponsiveDonationFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ResponsiveDonationClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ResponsiveDonationClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ResponsiveDonation smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ResponsiveDonationDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new ResponsiveDonationClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ResponsiveDonation smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ResponsiveDonation smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ResponsiveDonation smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new ResponsiveDonationClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ResponsiveDonation smart contract
 */
export class ResponsiveDonationClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ResponsiveDonationClient`
   *
   * @param appClient An `AppClient` instance which has been created with the ResponsiveDonation app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ResponsiveDonationClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ResponsiveDonationNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ResponsiveDonationClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ResponsiveDonationClient> {
    return new ResponsiveDonationClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ResponsiveDonationClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ResponsiveDonationClient> {
    return new ResponsiveDonationClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ResponsiveDonation smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `create_event(string,address)uint64` ABI method.
     *
     * Create a new event that can be used for conditional donations.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The event ID of the created event (uint64)
     */
    createEvent: (params: CallParams<ResponsiveDonationArgs['obj']['create_event(string,address)uint64'] | ResponsiveDonationArgs['tuple']['create_event(string,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ResponsiveDonationParamsFactory.createEvent(params))
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `instantaneous_payout(address,pay)bool` ABI method.
     *
    * Process an immediate donation with instant payout to recipient.
    Perfect for direct charitable giving with immediate impact.

     *
     * @param params The params for the smart contract call
     * @returns The call params: True if the donation is successful
     */
    instantaneousPayout: (params: CallParams<ResponsiveDonationArgs['obj']['instantaneous_payout(address,pay)bool'] | ResponsiveDonationArgs['tuple']['instantaneous_payout(address,pay)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ResponsiveDonationParamsFactory.instantaneousPayout(params))
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `create_conditional_donation(uint64,address,address,pay)uint64` ABI method.
     *
    * Create a conditional donation that will pay out based on event resolution.
    Example: "Donate $1000 to Red Cross IF hurricane hits Miami, otherwise return to me"

     *
     * @param params The params for the smart contract call
     * @returns The call params: The clause ID of the created conditional donation
     */
    createConditionalDonation: (params: CallParams<ResponsiveDonationArgs['obj']['create_conditional_donation(uint64,address,address,pay)uint64'] | ResponsiveDonationArgs['tuple']['create_conditional_donation(uint64,address,address,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ResponsiveDonationParamsFactory.createConditionalDonation(params))
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `mixed_donation(address,uint64,uint64,address,address,pay)uint64` ABI method.
     *
    * Create both instantaneous and conditional donations in a single transaction.
    Simplified version that handles one conditional donation to keep it simple.

     *
     * @param params The params for the smart contract call
     * @returns The call params: The clause ID for the conditional donation created
     */
    mixedDonation: (params: CallParams<ResponsiveDonationArgs['obj']['mixed_donation(address,uint64,uint64,address,address,pay)uint64'] | ResponsiveDonationArgs['tuple']['mixed_donation(address,uint64,uint64,address,address,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ResponsiveDonationParamsFactory.mixedDonation(params))
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `resolve_event(uint64,bool)bool` ABI method.
     *
     * Resolve an event outcome. Can only be called by the authorized oracle.
     *
     * @param params The params for the smart contract call
     * @returns The call params: True if the event is successfully resolved
     */
    resolveEvent: (params: CallParams<ResponsiveDonationArgs['obj']['resolve_event(uint64,bool)bool'] | ResponsiveDonationArgs['tuple']['resolve_event(uint64,bool)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ResponsiveDonationParamsFactory.resolveEvent(params))
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `execute_conditional_clause(uint64)bool` ABI method.
     *
    * Execute a conditional clause after its associated event has been resolved.
    Can be called by anyone to trigger payouts.

     *
     * @param params The params for the smart contract call
     * @returns The call params: True if the clause is successfully executed
     */
    executeConditionalClause: (params: CallParams<ResponsiveDonationArgs['obj']['execute_conditional_clause(uint64)bool'] | ResponsiveDonationArgs['tuple']['execute_conditional_clause(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ResponsiveDonationParamsFactory.executeConditionalClause(params))
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `execute_clauses_for_event(uint64)uint64` ABI method.
     *
    * Execute all unexecuted conditional clauses for a resolved event.
    This is more gas-efficient than executing clauses one by one.

     *
     * @param params The params for the smart contract call
     * @returns The call params: Number of clauses executed
     */
    executeClausesForEvent: (params: CallParams<ResponsiveDonationArgs['obj']['execute_clauses_for_event(uint64)uint64'] | ResponsiveDonationArgs['tuple']['execute_clauses_for_event(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ResponsiveDonationParamsFactory.executeClausesForEvent(params))
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `get_event_info(uint64)(uint64,string,bool,bool,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get information about an event.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The EventStruct containing the event's information
     */
    getEventInfo: (params: CallParams<ResponsiveDonationArgs['obj']['get_event_info(uint64)(uint64,string,bool,bool,address)'] | ResponsiveDonationArgs['tuple']['get_event_info(uint64)(uint64,string,bool,bool,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ResponsiveDonationParamsFactory.getEventInfo(params))
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get information about a conditional clause.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The ConditionalClauseStruct containing the clause's information
     */
    getClauseInfo: (params: CallParams<ResponsiveDonationArgs['obj']['get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)'] | ResponsiveDonationArgs['tuple']['get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ResponsiveDonationParamsFactory.getClauseInfo(params))
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `get_pending_events()uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get all pending event IDs. Oracle can use this to know which events to monitor.
    Note: This is a simplified version - in production you'd want pagination for large numbers of events.

     *
     * @param params The params for the smart contract call
     * @returns The call params: Array of pending event IDs (empty for now - placeholder for interface)
     */
    getPendingEvents: (params: CallParams<ResponsiveDonationArgs['obj']['get_pending_events()uint64[]'] | ResponsiveDonationArgs['tuple']['get_pending_events()uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ResponsiveDonationParamsFactory.getPendingEvents(params))
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `get_clauses_for_event(uint64)uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get all clause IDs that depend on a specific event.
    Oracle can call this when resolving an event to get all clauses to execute.

     *
     * @param params The params for the smart contract call
     * @returns The call params: Array of clause IDs that depend on this event
     */
    getClausesForEvent: (params: CallParams<ResponsiveDonationArgs['obj']['get_clauses_for_event(uint64)uint64[]'] | ResponsiveDonationArgs['tuple']['get_clauses_for_event(uint64)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ResponsiveDonationParamsFactory.getClausesForEvent(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ResponsiveDonation smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `create_event(string,address)uint64` ABI method.
     *
     * Create a new event that can be used for conditional donations.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The event ID of the created event (uint64)
     */
    createEvent: (params: CallParams<ResponsiveDonationArgs['obj']['create_event(string,address)uint64'] | ResponsiveDonationArgs['tuple']['create_event(string,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ResponsiveDonationParamsFactory.createEvent(params))
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `instantaneous_payout(address,pay)bool` ABI method.
     *
    * Process an immediate donation with instant payout to recipient.
    Perfect for direct charitable giving with immediate impact.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: True if the donation is successful
     */
    instantaneousPayout: (params: CallParams<ResponsiveDonationArgs['obj']['instantaneous_payout(address,pay)bool'] | ResponsiveDonationArgs['tuple']['instantaneous_payout(address,pay)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ResponsiveDonationParamsFactory.instantaneousPayout(params))
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `create_conditional_donation(uint64,address,address,pay)uint64` ABI method.
     *
    * Create a conditional donation that will pay out based on event resolution.
    Example: "Donate $1000 to Red Cross IF hurricane hits Miami, otherwise return to me"

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The clause ID of the created conditional donation
     */
    createConditionalDonation: (params: CallParams<ResponsiveDonationArgs['obj']['create_conditional_donation(uint64,address,address,pay)uint64'] | ResponsiveDonationArgs['tuple']['create_conditional_donation(uint64,address,address,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ResponsiveDonationParamsFactory.createConditionalDonation(params))
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `mixed_donation(address,uint64,uint64,address,address,pay)uint64` ABI method.
     *
    * Create both instantaneous and conditional donations in a single transaction.
    Simplified version that handles one conditional donation to keep it simple.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The clause ID for the conditional donation created
     */
    mixedDonation: (params: CallParams<ResponsiveDonationArgs['obj']['mixed_donation(address,uint64,uint64,address,address,pay)uint64'] | ResponsiveDonationArgs['tuple']['mixed_donation(address,uint64,uint64,address,address,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ResponsiveDonationParamsFactory.mixedDonation(params))
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `resolve_event(uint64,bool)bool` ABI method.
     *
     * Resolve an event outcome. Can only be called by the authorized oracle.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: True if the event is successfully resolved
     */
    resolveEvent: (params: CallParams<ResponsiveDonationArgs['obj']['resolve_event(uint64,bool)bool'] | ResponsiveDonationArgs['tuple']['resolve_event(uint64,bool)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ResponsiveDonationParamsFactory.resolveEvent(params))
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `execute_conditional_clause(uint64)bool` ABI method.
     *
    * Execute a conditional clause after its associated event has been resolved.
    Can be called by anyone to trigger payouts.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: True if the clause is successfully executed
     */
    executeConditionalClause: (params: CallParams<ResponsiveDonationArgs['obj']['execute_conditional_clause(uint64)bool'] | ResponsiveDonationArgs['tuple']['execute_conditional_clause(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ResponsiveDonationParamsFactory.executeConditionalClause(params))
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `execute_clauses_for_event(uint64)uint64` ABI method.
     *
    * Execute all unexecuted conditional clauses for a resolved event.
    This is more gas-efficient than executing clauses one by one.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Number of clauses executed
     */
    executeClausesForEvent: (params: CallParams<ResponsiveDonationArgs['obj']['execute_clauses_for_event(uint64)uint64'] | ResponsiveDonationArgs['tuple']['execute_clauses_for_event(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ResponsiveDonationParamsFactory.executeClausesForEvent(params))
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `get_event_info(uint64)(uint64,string,bool,bool,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get information about an event.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The EventStruct containing the event's information
     */
    getEventInfo: (params: CallParams<ResponsiveDonationArgs['obj']['get_event_info(uint64)(uint64,string,bool,bool,address)'] | ResponsiveDonationArgs['tuple']['get_event_info(uint64)(uint64,string,bool,bool,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ResponsiveDonationParamsFactory.getEventInfo(params))
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get information about a conditional clause.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The ConditionalClauseStruct containing the clause's information
     */
    getClauseInfo: (params: CallParams<ResponsiveDonationArgs['obj']['get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)'] | ResponsiveDonationArgs['tuple']['get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ResponsiveDonationParamsFactory.getClauseInfo(params))
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `get_pending_events()uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get all pending event IDs. Oracle can use this to know which events to monitor.
    Note: This is a simplified version - in production you'd want pagination for large numbers of events.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Array of pending event IDs (empty for now - placeholder for interface)
     */
    getPendingEvents: (params: CallParams<ResponsiveDonationArgs['obj']['get_pending_events()uint64[]'] | ResponsiveDonationArgs['tuple']['get_pending_events()uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ResponsiveDonationParamsFactory.getPendingEvents(params))
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `get_clauses_for_event(uint64)uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get all clause IDs that depend on a specific event.
    Oracle can call this when resolving an event to get all clauses to execute.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Array of clause IDs that depend on this event
     */
    getClausesForEvent: (params: CallParams<ResponsiveDonationArgs['obj']['get_clauses_for_event(uint64)uint64[]'] | ResponsiveDonationArgs['tuple']['get_clauses_for_event(uint64)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ResponsiveDonationParamsFactory.getClausesForEvent(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ResponsiveDonation smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `create_event(string,address)uint64` ABI method.
     *
     * Create a new event that can be used for conditional donations.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The event ID of the created event (uint64)
     */
    createEvent: async (params: CallParams<ResponsiveDonationArgs['obj']['create_event(string,address)uint64'] | ResponsiveDonationArgs['tuple']['create_event(string,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ResponsiveDonationParamsFactory.createEvent(params))
      return {...result, return: result.return as unknown as (undefined | ResponsiveDonationReturns['create_event(string,address)uint64'])}
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `instantaneous_payout(address,pay)bool` ABI method.
     *
    * Process an immediate donation with instant payout to recipient.
    Perfect for direct charitable giving with immediate impact.

     *
     * @param params The params for the smart contract call
     * @returns The call result: True if the donation is successful
     */
    instantaneousPayout: async (params: CallParams<ResponsiveDonationArgs['obj']['instantaneous_payout(address,pay)bool'] | ResponsiveDonationArgs['tuple']['instantaneous_payout(address,pay)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ResponsiveDonationParamsFactory.instantaneousPayout(params))
      return {...result, return: result.return as unknown as (undefined | ResponsiveDonationReturns['instantaneous_payout(address,pay)bool'])}
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `create_conditional_donation(uint64,address,address,pay)uint64` ABI method.
     *
    * Create a conditional donation that will pay out based on event resolution.
    Example: "Donate $1000 to Red Cross IF hurricane hits Miami, otherwise return to me"

     *
     * @param params The params for the smart contract call
     * @returns The call result: The clause ID of the created conditional donation
     */
    createConditionalDonation: async (params: CallParams<ResponsiveDonationArgs['obj']['create_conditional_donation(uint64,address,address,pay)uint64'] | ResponsiveDonationArgs['tuple']['create_conditional_donation(uint64,address,address,pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ResponsiveDonationParamsFactory.createConditionalDonation(params))
      return {...result, return: result.return as unknown as (undefined | ResponsiveDonationReturns['create_conditional_donation(uint64,address,address,pay)uint64'])}
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `mixed_donation(address,uint64,uint64,address,address,pay)uint64` ABI method.
     *
    * Create both instantaneous and conditional donations in a single transaction.
    Simplified version that handles one conditional donation to keep it simple.

     *
     * @param params The params for the smart contract call
     * @returns The call result: The clause ID for the conditional donation created
     */
    mixedDonation: async (params: CallParams<ResponsiveDonationArgs['obj']['mixed_donation(address,uint64,uint64,address,address,pay)uint64'] | ResponsiveDonationArgs['tuple']['mixed_donation(address,uint64,uint64,address,address,pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ResponsiveDonationParamsFactory.mixedDonation(params))
      return {...result, return: result.return as unknown as (undefined | ResponsiveDonationReturns['mixed_donation(address,uint64,uint64,address,address,pay)uint64'])}
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `resolve_event(uint64,bool)bool` ABI method.
     *
     * Resolve an event outcome. Can only be called by the authorized oracle.
     *
     * @param params The params for the smart contract call
     * @returns The call result: True if the event is successfully resolved
     */
    resolveEvent: async (params: CallParams<ResponsiveDonationArgs['obj']['resolve_event(uint64,bool)bool'] | ResponsiveDonationArgs['tuple']['resolve_event(uint64,bool)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ResponsiveDonationParamsFactory.resolveEvent(params))
      return {...result, return: result.return as unknown as (undefined | ResponsiveDonationReturns['resolve_event(uint64,bool)bool'])}
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `execute_conditional_clause(uint64)bool` ABI method.
     *
    * Execute a conditional clause after its associated event has been resolved.
    Can be called by anyone to trigger payouts.

     *
     * @param params The params for the smart contract call
     * @returns The call result: True if the clause is successfully executed
     */
    executeConditionalClause: async (params: CallParams<ResponsiveDonationArgs['obj']['execute_conditional_clause(uint64)bool'] | ResponsiveDonationArgs['tuple']['execute_conditional_clause(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ResponsiveDonationParamsFactory.executeConditionalClause(params))
      return {...result, return: result.return as unknown as (undefined | ResponsiveDonationReturns['execute_conditional_clause(uint64)bool'])}
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `execute_clauses_for_event(uint64)uint64` ABI method.
     *
    * Execute all unexecuted conditional clauses for a resolved event.
    This is more gas-efficient than executing clauses one by one.

     *
     * @param params The params for the smart contract call
     * @returns The call result: Number of clauses executed
     */
    executeClausesForEvent: async (params: CallParams<ResponsiveDonationArgs['obj']['execute_clauses_for_event(uint64)uint64'] | ResponsiveDonationArgs['tuple']['execute_clauses_for_event(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ResponsiveDonationParamsFactory.executeClausesForEvent(params))
      return {...result, return: result.return as unknown as (undefined | ResponsiveDonationReturns['execute_clauses_for_event(uint64)uint64'])}
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `get_event_info(uint64)(uint64,string,bool,bool,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get information about an event.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The EventStruct containing the event's information
     */
    getEventInfo: async (params: CallParams<ResponsiveDonationArgs['obj']['get_event_info(uint64)(uint64,string,bool,bool,address)'] | ResponsiveDonationArgs['tuple']['get_event_info(uint64)(uint64,string,bool,bool,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ResponsiveDonationParamsFactory.getEventInfo(params))
      return {...result, return: result.return as unknown as (undefined | ResponsiveDonationReturns['get_event_info(uint64)(uint64,string,bool,bool,address)'])}
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get information about a conditional clause.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The ConditionalClauseStruct containing the clause's information
     */
    getClauseInfo: async (params: CallParams<ResponsiveDonationArgs['obj']['get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)'] | ResponsiveDonationArgs['tuple']['get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ResponsiveDonationParamsFactory.getClauseInfo(params))
      return {...result, return: result.return as unknown as (undefined | ResponsiveDonationReturns['get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)'])}
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `get_pending_events()uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get all pending event IDs. Oracle can use this to know which events to monitor.
    Note: This is a simplified version - in production you'd want pagination for large numbers of events.

     *
     * @param params The params for the smart contract call
     * @returns The call result: Array of pending event IDs (empty for now - placeholder for interface)
     */
    getPendingEvents: async (params: CallParams<ResponsiveDonationArgs['obj']['get_pending_events()uint64[]'] | ResponsiveDonationArgs['tuple']['get_pending_events()uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ResponsiveDonationParamsFactory.getPendingEvents(params))
      return {...result, return: result.return as unknown as (undefined | ResponsiveDonationReturns['get_pending_events()uint64[]'])}
    },

    /**
     * Makes a call to the ResponsiveDonation smart contract using the `get_clauses_for_event(uint64)uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get all clause IDs that depend on a specific event.
    Oracle can call this when resolving an event to get all clauses to execute.

     *
     * @param params The params for the smart contract call
     * @returns The call result: Array of clause IDs that depend on this event
     */
    getClausesForEvent: async (params: CallParams<ResponsiveDonationArgs['obj']['get_clauses_for_event(uint64)uint64[]'] | ResponsiveDonationArgs['tuple']['get_clauses_for_event(uint64)uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ResponsiveDonationParamsFactory.getClausesForEvent(params))
      return {...result, return: result.return as unknown as (undefined | ResponsiveDonationReturns['get_clauses_for_event(uint64)uint64[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ResponsiveDonationClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the ResponsiveDonation smart contract using the `get_event_info(uint64)(uint64,string,bool,bool,address)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get information about an event.
   *
   * @param params The params for the smart contract call
   * @returns The call result: The EventStruct containing the event's information
   */
  async getEventInfo(params: CallParams<ResponsiveDonationArgs['obj']['get_event_info(uint64)(uint64,string,bool,bool,address)'] | ResponsiveDonationArgs['tuple']['get_event_info(uint64)(uint64,string,bool,bool,address)']>) {
    const result = await this.appClient.send.call(ResponsiveDonationParamsFactory.getEventInfo(params))
    return result.return as unknown as ResponsiveDonationReturns['get_event_info(uint64)(uint64,string,bool,bool,address)']
  }

  /**
   * Makes a readonly (simulated) call to the ResponsiveDonation smart contract using the `get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get information about a conditional clause.
   *
   * @param params The params for the smart contract call
   * @returns The call result: The ConditionalClauseStruct containing the clause's information
   */
  async getClauseInfo(params: CallParams<ResponsiveDonationArgs['obj']['get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)'] | ResponsiveDonationArgs['tuple']['get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)']>) {
    const result = await this.appClient.send.call(ResponsiveDonationParamsFactory.getClauseInfo(params))
    return result.return as unknown as ResponsiveDonationReturns['get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)']
  }

  /**
   * Makes a readonly (simulated) call to the ResponsiveDonation smart contract using the `get_pending_events()uint64[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  * Get all pending event IDs. Oracle can use this to know which events to monitor.
  Note: This is a simplified version - in production you'd want pagination for large numbers of events.

   *
   * @param params The params for the smart contract call
   * @returns The call result: Array of pending event IDs (empty for now - placeholder for interface)
   */
  async getPendingEvents(params: CallParams<ResponsiveDonationArgs['obj']['get_pending_events()uint64[]'] | ResponsiveDonationArgs['tuple']['get_pending_events()uint64[]']> = {args: []}) {
    const result = await this.appClient.send.call(ResponsiveDonationParamsFactory.getPendingEvents(params))
    return result.return as unknown as ResponsiveDonationReturns['get_pending_events()uint64[]']
  }

  /**
   * Makes a readonly (simulated) call to the ResponsiveDonation smart contract using the `get_clauses_for_event(uint64)uint64[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  * Get all clause IDs that depend on a specific event.
  Oracle can call this when resolving an event to get all clauses to execute.

   *
   * @param params The params for the smart contract call
   * @returns The call result: Array of clause IDs that depend on this event
   */
  async getClausesForEvent(params: CallParams<ResponsiveDonationArgs['obj']['get_clauses_for_event(uint64)uint64[]'] | ResponsiveDonationArgs['tuple']['get_clauses_for_event(uint64)uint64[]']>) {
    const result = await this.appClient.send.call(ResponsiveDonationParamsFactory.getClausesForEvent(params))
    return result.return as unknown as ResponsiveDonationReturns['get_clauses_for_event(uint64)uint64[]']
  }

  /**
   * Methods to access state for the current ResponsiveDonation app
   */
  state = {
    /**
     * Methods to access box state for the current ResponsiveDonation app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the listed_events map in box state
       */
      listedEvents: {
        /**
         * Get all current values of the listed_events map in box state
         */
        getMap: async (): Promise<Map<bigint, EventStruct>> => { return (await this.appClient.state.box.getMap("listed_events")) as Map<bigint, EventStruct> },
        /**
         * Get a current value of the listed_events map by key from box state
         */
        value: async (key: bigint | number): Promise<EventStruct | undefined> => { return await this.appClient.state.box.getMapValue("listed_events", key) as EventStruct | undefined },
      },
      /**
       * Get values from the conditional_clauses map in box state
       */
      conditionalClauses: {
        /**
         * Get all current values of the conditional_clauses map in box state
         */
        getMap: async (): Promise<Map<bigint, ConditionalClauseStruct>> => { return (await this.appClient.state.box.getMap("conditional_clauses")) as Map<bigint, ConditionalClauseStruct> },
        /**
         * Get a current value of the conditional_clauses map by key from box state
         */
        value: async (key: bigint | number): Promise<ConditionalClauseStruct | undefined> => { return await this.appClient.state.box.getMapValue("conditional_clauses", key) as ConditionalClauseStruct | undefined },
      },
      /**
       * Get values from the event_clauses map in box state
       */
      eventClauses: {
        /**
         * Get all current values of the event_clauses map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint[]>> => { return (await this.appClient.state.box.getMap("event_clauses")) as Map<bigint, bigint[]> },
        /**
         * Get a current value of the event_clauses map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint[] | undefined> => { return await this.appClient.state.box.getMapValue("event_clauses", key) as bigint[] | undefined },
      },
    },
  }

  public newGroup(): ResponsiveDonationComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a create_event(string,address)uint64 method call against the ResponsiveDonation contract
       */
      createEvent(params: CallParams<ResponsiveDonationArgs['obj']['create_event(string,address)uint64'] | ResponsiveDonationArgs['tuple']['create_event(string,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createEvent(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_event(string,address)uint64', v))
        return this
      },
      /**
       * Add a instantaneous_payout(address,pay)bool method call against the ResponsiveDonation contract
       */
      instantaneousPayout(params: CallParams<ResponsiveDonationArgs['obj']['instantaneous_payout(address,pay)bool'] | ResponsiveDonationArgs['tuple']['instantaneous_payout(address,pay)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.instantaneousPayout(params)))
        resultMappers.push((v) => client.decodeReturnValue('instantaneous_payout(address,pay)bool', v))
        return this
      },
      /**
       * Add a create_conditional_donation(uint64,address,address,pay)uint64 method call against the ResponsiveDonation contract
       */
      createConditionalDonation(params: CallParams<ResponsiveDonationArgs['obj']['create_conditional_donation(uint64,address,address,pay)uint64'] | ResponsiveDonationArgs['tuple']['create_conditional_donation(uint64,address,address,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createConditionalDonation(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_conditional_donation(uint64,address,address,pay)uint64', v))
        return this
      },
      /**
       * Add a mixed_donation(address,uint64,uint64,address,address,pay)uint64 method call against the ResponsiveDonation contract
       */
      mixedDonation(params: CallParams<ResponsiveDonationArgs['obj']['mixed_donation(address,uint64,uint64,address,address,pay)uint64'] | ResponsiveDonationArgs['tuple']['mixed_donation(address,uint64,uint64,address,address,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mixedDonation(params)))
        resultMappers.push((v) => client.decodeReturnValue('mixed_donation(address,uint64,uint64,address,address,pay)uint64', v))
        return this
      },
      /**
       * Add a resolve_event(uint64,bool)bool method call against the ResponsiveDonation contract
       */
      resolveEvent(params: CallParams<ResponsiveDonationArgs['obj']['resolve_event(uint64,bool)bool'] | ResponsiveDonationArgs['tuple']['resolve_event(uint64,bool)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resolveEvent(params)))
        resultMappers.push((v) => client.decodeReturnValue('resolve_event(uint64,bool)bool', v))
        return this
      },
      /**
       * Add a execute_conditional_clause(uint64)bool method call against the ResponsiveDonation contract
       */
      executeConditionalClause(params: CallParams<ResponsiveDonationArgs['obj']['execute_conditional_clause(uint64)bool'] | ResponsiveDonationArgs['tuple']['execute_conditional_clause(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.executeConditionalClause(params)))
        resultMappers.push((v) => client.decodeReturnValue('execute_conditional_clause(uint64)bool', v))
        return this
      },
      /**
       * Add a execute_clauses_for_event(uint64)uint64 method call against the ResponsiveDonation contract
       */
      executeClausesForEvent(params: CallParams<ResponsiveDonationArgs['obj']['execute_clauses_for_event(uint64)uint64'] | ResponsiveDonationArgs['tuple']['execute_clauses_for_event(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.executeClausesForEvent(params)))
        resultMappers.push((v) => client.decodeReturnValue('execute_clauses_for_event(uint64)uint64', v))
        return this
      },
      /**
       * Add a get_event_info(uint64)(uint64,string,bool,bool,address) method call against the ResponsiveDonation contract
       */
      getEventInfo(params: CallParams<ResponsiveDonationArgs['obj']['get_event_info(uint64)(uint64,string,bool,bool,address)'] | ResponsiveDonationArgs['tuple']['get_event_info(uint64)(uint64,string,bool,bool,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getEventInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_event_info(uint64)(uint64,string,bool,bool,address)', v))
        return this
      },
      /**
       * Add a get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool) method call against the ResponsiveDonation contract
       */
      getClauseInfo(params: CallParams<ResponsiveDonationArgs['obj']['get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)'] | ResponsiveDonationArgs['tuple']['get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getClauseInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)', v))
        return this
      },
      /**
       * Add a get_pending_events()uint64[] method call against the ResponsiveDonation contract
       */
      getPendingEvents(params: CallParams<ResponsiveDonationArgs['obj']['get_pending_events()uint64[]'] | ResponsiveDonationArgs['tuple']['get_pending_events()uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPendingEvents(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_pending_events()uint64[]', v))
        return this
      },
      /**
       * Add a get_clauses_for_event(uint64)uint64[] method call against the ResponsiveDonation contract
       */
      getClausesForEvent(params: CallParams<ResponsiveDonationArgs['obj']['get_clauses_for_event(uint64)uint64[]'] | ResponsiveDonationArgs['tuple']['get_clauses_for_event(uint64)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getClausesForEvent(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_clauses_for_event(uint64)uint64[]', v))
        return this
      },
      /**
       * Add a clear state call to the ResponsiveDonation contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ResponsiveDonationComposer
  }
}
export type ResponsiveDonationComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create_event(string,address)uint64 ABI method.
   *
   * Create a new event that can be used for conditional donations.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createEvent(params?: CallParams<ResponsiveDonationArgs['obj']['create_event(string,address)uint64'] | ResponsiveDonationArgs['tuple']['create_event(string,address)uint64']>): ResponsiveDonationComposer<[...TReturns, ResponsiveDonationReturns['create_event(string,address)uint64'] | undefined]>

  /**
   * Calls the instantaneous_payout(address,pay)bool ABI method.
   *
  * Process an immediate donation with instant payout to recipient.
  Perfect for direct charitable giving with immediate impact.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  instantaneousPayout(params?: CallParams<ResponsiveDonationArgs['obj']['instantaneous_payout(address,pay)bool'] | ResponsiveDonationArgs['tuple']['instantaneous_payout(address,pay)bool']>): ResponsiveDonationComposer<[...TReturns, ResponsiveDonationReturns['instantaneous_payout(address,pay)bool'] | undefined]>

  /**
   * Calls the create_conditional_donation(uint64,address,address,pay)uint64 ABI method.
   *
  * Create a conditional donation that will pay out based on event resolution.
  Example: "Donate $1000 to Red Cross IF hurricane hits Miami, otherwise return to me"

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createConditionalDonation(params?: CallParams<ResponsiveDonationArgs['obj']['create_conditional_donation(uint64,address,address,pay)uint64'] | ResponsiveDonationArgs['tuple']['create_conditional_donation(uint64,address,address,pay)uint64']>): ResponsiveDonationComposer<[...TReturns, ResponsiveDonationReturns['create_conditional_donation(uint64,address,address,pay)uint64'] | undefined]>

  /**
   * Calls the mixed_donation(address,uint64,uint64,address,address,pay)uint64 ABI method.
   *
  * Create both instantaneous and conditional donations in a single transaction.
  Simplified version that handles one conditional donation to keep it simple.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mixedDonation(params?: CallParams<ResponsiveDonationArgs['obj']['mixed_donation(address,uint64,uint64,address,address,pay)uint64'] | ResponsiveDonationArgs['tuple']['mixed_donation(address,uint64,uint64,address,address,pay)uint64']>): ResponsiveDonationComposer<[...TReturns, ResponsiveDonationReturns['mixed_donation(address,uint64,uint64,address,address,pay)uint64'] | undefined]>

  /**
   * Calls the resolve_event(uint64,bool)bool ABI method.
   *
   * Resolve an event outcome. Can only be called by the authorized oracle.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resolveEvent(params?: CallParams<ResponsiveDonationArgs['obj']['resolve_event(uint64,bool)bool'] | ResponsiveDonationArgs['tuple']['resolve_event(uint64,bool)bool']>): ResponsiveDonationComposer<[...TReturns, ResponsiveDonationReturns['resolve_event(uint64,bool)bool'] | undefined]>

  /**
   * Calls the execute_conditional_clause(uint64)bool ABI method.
   *
  * Execute a conditional clause after its associated event has been resolved.
  Can be called by anyone to trigger payouts.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  executeConditionalClause(params?: CallParams<ResponsiveDonationArgs['obj']['execute_conditional_clause(uint64)bool'] | ResponsiveDonationArgs['tuple']['execute_conditional_clause(uint64)bool']>): ResponsiveDonationComposer<[...TReturns, ResponsiveDonationReturns['execute_conditional_clause(uint64)bool'] | undefined]>

  /**
   * Calls the execute_clauses_for_event(uint64)uint64 ABI method.
   *
  * Execute all unexecuted conditional clauses for a resolved event.
  This is more gas-efficient than executing clauses one by one.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  executeClausesForEvent(params?: CallParams<ResponsiveDonationArgs['obj']['execute_clauses_for_event(uint64)uint64'] | ResponsiveDonationArgs['tuple']['execute_clauses_for_event(uint64)uint64']>): ResponsiveDonationComposer<[...TReturns, ResponsiveDonationReturns['execute_clauses_for_event(uint64)uint64'] | undefined]>

  /**
   * Calls the get_event_info(uint64)(uint64,string,bool,bool,address) ABI method.
   *
   * Get information about an event.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getEventInfo(params?: CallParams<ResponsiveDonationArgs['obj']['get_event_info(uint64)(uint64,string,bool,bool,address)'] | ResponsiveDonationArgs['tuple']['get_event_info(uint64)(uint64,string,bool,bool,address)']>): ResponsiveDonationComposer<[...TReturns, ResponsiveDonationReturns['get_event_info(uint64)(uint64,string,bool,bool,address)'] | undefined]>

  /**
   * Calls the get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool) ABI method.
   *
   * Get information about a conditional clause.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getClauseInfo(params?: CallParams<ResponsiveDonationArgs['obj']['get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)'] | ResponsiveDonationArgs['tuple']['get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)']>): ResponsiveDonationComposer<[...TReturns, ResponsiveDonationReturns['get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)'] | undefined]>

  /**
   * Calls the get_pending_events()uint64[] ABI method.
   *
  * Get all pending event IDs. Oracle can use this to know which events to monitor.
  Note: This is a simplified version - in production you'd want pagination for large numbers of events.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPendingEvents(params?: CallParams<ResponsiveDonationArgs['obj']['get_pending_events()uint64[]'] | ResponsiveDonationArgs['tuple']['get_pending_events()uint64[]']>): ResponsiveDonationComposer<[...TReturns, ResponsiveDonationReturns['get_pending_events()uint64[]'] | undefined]>

  /**
   * Calls the get_clauses_for_event(uint64)uint64[] ABI method.
   *
  * Get all clause IDs that depend on a specific event.
  Oracle can call this when resolving an event to get all clauses to execute.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getClausesForEvent(params?: CallParams<ResponsiveDonationArgs['obj']['get_clauses_for_event(uint64)uint64[]'] | ResponsiveDonationArgs['tuple']['get_clauses_for_event(uint64)uint64[]']>): ResponsiveDonationComposer<[...TReturns, ResponsiveDonationReturns['get_clauses_for_event(uint64)uint64[]'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ResponsiveDonation smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ResponsiveDonationComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ResponsiveDonationComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ResponsiveDonationComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ResponsiveDonationComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ResponsiveDonationComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ResponsiveDonationComposerResults<TReturns>>
}
export type ResponsiveDonationComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

