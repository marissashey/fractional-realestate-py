{
  "version": 3,
  "sources": [
    "../../responsive_donation/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAibK;;AAAA;AAAA;AAAA;;AAAA;AAjbL;;;AAibK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AA9YL;;;AA8YK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AA7XL;;;AA6XK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA3DA;;AAAA;AAAA;AAAA;;AAAA;AAlUL;;;AAkUK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjDA;;AAAA;AAAA;AAAA;;AAAA;AAjRL;;;AAiRK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlCA;;AAAA;AAAA;AAAA;;AAAA;AA/OL;;;AAAA;;;AA+OK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5EA;;AAAA;AAAA;AAAA;;AAAA;AAnKL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmKK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1DA;;AAAA;AAAA;AAAA;;AAAA;AAzGL;;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyGK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AAzEL;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyEK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AA3CL;;;AAAA;;;AA2CK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA3CL;;AAAA;;;;;;;;;AA2CA;;;AAiB+B;;AAAZ;AAGoB;AAAA;;;;AAAA;AAGnB;;;AAHmB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA/B;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAQA;AAER;;;AAkBe;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAkB;;AAAlB;AAAP;AACO;;AAAA;;AAAP;AAAA;AACO;AAAkB;;;AAAlB;AAAP;AAGA;;;;;;;AAAA;;;AAGQ;;;AAHR;AAMO;AAAP;AAER;;;AAsB2B;AAAZ;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACe;AAAA;AACR;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAP;AAGO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAkB;;AAAlB;AAAP;AACO;;AAAA;;AAAP;AAAA;AAGwB;;AAAV;AACU;;AAAkC;AAAA;;;AAAR;AAA1B;AAAZ;AAAA;AAAA;;AAMM;AAGa;;AANO;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOzB;AAPyB;AAAtC;AAAA;;AAAA;AAAA;AAAA;AAWe;;AAAZ;;AAAA;AAAA;AAAA;AAAA;;AAAX;;;AAC+B;;AAAA;AAAA;AAAA;AACnB;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;;AAAA;;AAAA;AAMJ;AAHuB;;AAAA;;AAAA;AACnB;;AAAA;AAAA;;AAAA;AAAA;AAEJ;AAER;;;;;AA0Be;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAkB;;AAAlB;AAAP;AACO;;AAAA;;AAAP;AAAA;AAGkD;;AAAA;AAAA;AAAA;;AAAjB;AAAA;AAAZ;AAAA;AAAA;;AACd;AAAP;AAAA;AAEA;;AAAiB;AACV;;AAAA;AAAP;AAGR;;;AACY;;;;;;;;;AAAA;;;AAGQ;;;AAHR;AAOe;AAAZ;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACe;AAAA;AACR;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAP;AAGwB;;AAAV;AACU;;AAAkC;AAAA;;;AAAR;AAA1B;AAAqD;AAArD;AAAZ;AAAA;AAAA;;AAQmB;;AANO;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOzB;AAPyB;AAAtC;AAAA;;AAAA;AAAA;AAAA;AAWe;;AAAZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAX;;;AAC+B;;AAAA;AAAA;AAAA;AACnB;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;;AAAA;;AAAA;AAMJ;;AAAA;;AAAA;AAHuB;;AAAA;;AAAA;AACnB;;AAAA;AAAA;;AAAA;AAAA;;;;AAIZ;;;AAiB2B;AAAZ;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAEe;AAAA;AAAA;AAGR;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAP;AAGO;;AAAc;;AAAA;;;AAAd;AAAP;AAGA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;;AAAA;AAEO;AAAP;AAER;;;AAgB4B;AAAb;;AAAA;AAAA;;AAAA;AAAA;;AAAP;AAEgB;AAAA;AAAA;AAAA;;AAAA;AAGL;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AAAP;AAGO;;;AAA0B;AAA1B;AAAA;AAAA;AAAA;AAAA;;AAAP;AACe;AAAA;AAGJ;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AAAP;AAGG;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAX;;;AACwB;;AAAA;;;AAKhB;AACW;;AAAA;AAAA;;AAAA;;;;;;;AADX;;;AAGQ;;;AAHR;AAOA;;AAAA;AAAA;AACA;;AAAA;AAAA;AAEO;AAAP;;AAAA;AAbgB;;AAAA;;;;;;AAexB;;;;;;;;;AAgB2B;AAAZ;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACe;AAAA;AAAA;AAAA;;AAAA;AACJ;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AAAP;AAGmB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAEQ;;AAAP;;AAAA;AAES;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACI;;AAAjB;;AAGgB;AAAA;AAAA;;AAAP;AAAL;;AAAK;;AAAA;;AAAA;AAAjB;;;AACwB;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAEI;AAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAAf;;;AACgC;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGb;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAnB;;;AAImB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAnB;;;AACgC;;AAAA;;;AAKhB;AACW;;AAAA;AAAA;;AAAA;;;;;;;AADX;;;AAGQ;;;AAHR;AAOA;;AAAA;AAAA;AACA;;AAAA;AAAA;AAC6B;;AAAA;AAAwB;AAAxB;AAAZ;;;;;;;AA1BhB;;AAAA;AAAA;AAAA;;;;;AAce;;AAAA;;;;;;AAcxB;;AAAA;;AAAA;AAER;;;AAc2B;AAAZ;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACO;AAAA;AAAP;AAER;;;AAc4B;AAAb;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACO;AAAA;AAAP;AAoBR;;;AAgBuB;;AAAZ;;AAAA;AAAA;AAAA;AAAA;;AAAX;;;AACmB;;AAAA;AAAA;AAAP;AAAA;AAGO;;;;AAAP;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.responsive_donation.contract.ResponsiveDonation.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 80 81 960"
    },
    "9": {
      "op": "bytecblock 0x00 0x151f7c75 \"events\" \"clauses\" \"event_clauses\" 0x0001 0x0000000000000000"
    },
    "59": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "61": {
      "op": "bz main_bare_routing@16",
      "stack_out": []
    },
    "64": {
      "op": "pushbytess 0x963e92ef 0x848dbe52 0x1206d8fd 0xa6fed344 0x2db69946 0xb5a167ca 0x153a525c 0xb84e15d6 0x765e0f3f 0xc89dd902 0x2c1d6d17 // method \"create_event(string,address)uint64\", method \"instantaneous_payout(address,pay)bool\", method \"create_conditional_donation(uint64,address,address,pay)uint64\", method \"mixed_donation(address,uint64,uint64,address,address,pay)uint64\", method \"resolve_event(uint64,bool)bool\", method \"execute_conditional_clause(uint64)bool\", method \"execute_clauses_for_event(uint64)uint64\", method \"get_event_info(uint64)(uint64,string,bool,bool,address)\", method \"get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)\", method \"get_pending_events()uint64[]\", method \"get_clauses_for_event(uint64)uint64[]\"",
      "defined_out": [
        "Method(create_conditional_donation(uint64,address,address,pay)uint64)",
        "Method(create_event(string,address)uint64)",
        "Method(execute_clauses_for_event(uint64)uint64)",
        "Method(execute_conditional_clause(uint64)bool)",
        "Method(get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool))",
        "Method(get_clauses_for_event(uint64)uint64[])",
        "Method(get_event_info(uint64)(uint64,string,bool,bool,address))",
        "Method(get_pending_events()uint64[])",
        "Method(instantaneous_payout(address,pay)bool)",
        "Method(mixed_donation(address,uint64,uint64,address,address,pay)uint64)",
        "Method(resolve_event(uint64,bool)bool)"
      ],
      "stack_out": [
        "Method(create_event(string,address)uint64)",
        "Method(instantaneous_payout(address,pay)bool)",
        "Method(create_conditional_donation(uint64,address,address,pay)uint64)",
        "Method(mixed_donation(address,uint64,uint64,address,address,pay)uint64)",
        "Method(resolve_event(uint64,bool)bool)",
        "Method(execute_conditional_clause(uint64)bool)",
        "Method(execute_clauses_for_event(uint64)uint64)",
        "Method(get_event_info(uint64)(uint64,string,bool,bool,address))",
        "Method(get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool))",
        "Method(get_pending_events()uint64[])",
        "Method(get_clauses_for_event(uint64)uint64[])"
      ]
    },
    "121": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create_conditional_donation(uint64,address,address,pay)uint64)",
        "Method(create_event(string,address)uint64)",
        "Method(execute_clauses_for_event(uint64)uint64)",
        "Method(execute_conditional_clause(uint64)bool)",
        "Method(get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool))",
        "Method(get_clauses_for_event(uint64)uint64[])",
        "Method(get_event_info(uint64)(uint64,string,bool,bool,address))",
        "Method(get_pending_events()uint64[])",
        "Method(instantaneous_payout(address,pay)bool)",
        "Method(mixed_donation(address,uint64,uint64,address,address,pay)uint64)",
        "Method(resolve_event(uint64,bool)bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_event(string,address)uint64)",
        "Method(instantaneous_payout(address,pay)bool)",
        "Method(create_conditional_donation(uint64,address,address,pay)uint64)",
        "Method(mixed_donation(address,uint64,uint64,address,address,pay)uint64)",
        "Method(resolve_event(uint64,bool)bool)",
        "Method(execute_conditional_clause(uint64)bool)",
        "Method(execute_clauses_for_event(uint64)uint64)",
        "Method(get_event_info(uint64)(uint64,string,bool,bool,address))",
        "Method(get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool))",
        "Method(get_pending_events()uint64[])",
        "Method(get_clauses_for_event(uint64)uint64[])",
        "tmp%2#0"
      ]
    },
    "124": {
      "op": "match main_create_event_route@5 main_instantaneous_payout_route@6 main_create_conditional_donation_route@7 main_mixed_donation_route@8 main_resolve_event_route@9 main_execute_conditional_clause_route@10 main_execute_clauses_for_event_route@11 main_get_event_info_route@12 main_get_clause_info_route@13 main_get_pending_events_route@14 main_get_clauses_for_event_route@15",
      "stack_out": []
    },
    "148": {
      "block": "main_after_if_else@18",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "149": {
      "op": "return",
      "stack_out": []
    },
    "150": {
      "block": "main_get_clauses_for_event_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "152": {
      "op": "!",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "153": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "154": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "156": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "157": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "160": {
      "callsub": "smart_contracts.responsive_donation.contract.ResponsiveDonation.get_clauses_for_event",
      "op": "callsub get_clauses_for_event",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "163": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "0x151f7c75"
      ]
    },
    "164": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%68#0"
      ]
    },
    "165": {
      "op": "concat",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "166": {
      "op": "log",
      "stack_out": []
    },
    "167": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "168": {
      "op": "return",
      "stack_out": []
    },
    "169": {
      "block": "main_get_pending_events_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "171": {
      "op": "!",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "172": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "173": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "175": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "176": {
      "op": "pushbytes 0x151f7c750000",
      "defined_out": [
        "0x151f7c750000"
      ],
      "stack_out": [
        "0x151f7c750000"
      ]
    },
    "184": {
      "op": "log",
      "stack_out": []
    },
    "185": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "186": {
      "op": "return",
      "stack_out": []
    },
    "187": {
      "block": "main_get_clause_info_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "189": {
      "op": "!",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "190": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "191": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "193": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "194": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "197": {
      "callsub": "smart_contracts.responsive_donation.contract.ResponsiveDonation.get_clause_info",
      "op": "callsub get_clause_info",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "200": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "0x151f7c75"
      ]
    },
    "201": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%56#0"
      ]
    },
    "202": {
      "op": "concat",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "203": {
      "op": "log",
      "stack_out": []
    },
    "204": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "205": {
      "op": "return",
      "stack_out": []
    },
    "206": {
      "block": "main_get_event_info_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "208": {
      "op": "!",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "209": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "210": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "212": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "213": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "216": {
      "callsub": "smart_contracts.responsive_donation.contract.ResponsiveDonation.get_event_info",
      "op": "callsub get_event_info",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "219": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "0x151f7c75"
      ]
    },
    "220": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%50#0"
      ]
    },
    "221": {
      "op": "concat",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "222": {
      "op": "log",
      "stack_out": []
    },
    "223": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "224": {
      "op": "return",
      "stack_out": []
    },
    "225": {
      "block": "main_execute_clauses_for_event_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "227": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "228": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "229": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "231": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "232": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "235": {
      "callsub": "smart_contracts.responsive_donation.contract.ResponsiveDonation.execute_clauses_for_event",
      "op": "callsub execute_clauses_for_event",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "238": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "0x151f7c75"
      ]
    },
    "239": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%44#0"
      ]
    },
    "240": {
      "op": "concat",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "241": {
      "op": "log",
      "stack_out": []
    },
    "242": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "243": {
      "op": "return",
      "stack_out": []
    },
    "244": {
      "block": "main_execute_conditional_clause_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "246": {
      "op": "!",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "247": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "248": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "250": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "251": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "254": {
      "callsub": "smart_contracts.responsive_donation.contract.ResponsiveDonation.execute_conditional_clause",
      "op": "callsub execute_conditional_clause",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "257": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00"
      ]
    },
    "258": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00",
        "0"
      ]
    },
    "259": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%2#0"
      ]
    },
    "261": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0"
      ]
    },
    "262": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0",
        "0x151f7c75"
      ]
    },
    "263": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ]
    },
    "264": {
      "op": "concat",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "265": {
      "op": "log",
      "stack_out": []
    },
    "266": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "267": {
      "op": "return",
      "stack_out": []
    },
    "268": {
      "block": "main_resolve_event_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "270": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "271": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "272": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "274": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "275": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "278": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "281": {
      "callsub": "smart_contracts.responsive_donation.contract.ResponsiveDonation.resolve_event",
      "op": "callsub resolve_event",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "284": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00"
      ]
    },
    "285": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00",
        "0"
      ]
    },
    "286": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%1#0"
      ]
    },
    "288": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "289": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "0x151f7c75"
      ]
    },
    "290": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ]
    },
    "291": {
      "op": "concat",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "292": {
      "op": "log",
      "stack_out": []
    },
    "293": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "294": {
      "op": "return",
      "stack_out": []
    },
    "295": {
      "block": "main_mixed_donation_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "297": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "298": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "299": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "301": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "302": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0"
      ]
    },
    "305": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "308": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "311": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[32]%5#0"
      ]
    },
    "314": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0"
      ]
    },
    "317": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "tmp%27#0"
      ]
    },
    "319": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "tmp%27#0",
        "1"
      ]
    },
    "320": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "gtxn_idx%2#0"
      ]
    },
    "321": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "322": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "324": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay",
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "325": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0",
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "326": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "gtxn_idx%2#0"
      ]
    },
    "327": {
      "callsub": "smart_contracts.responsive_donation.contract.ResponsiveDonation.mixed_donation",
      "op": "callsub mixed_donation",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "330": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "0x151f7c75"
      ]
    },
    "331": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%28#0"
      ]
    },
    "332": {
      "op": "concat",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "333": {
      "op": "log",
      "stack_out": []
    },
    "334": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "335": {
      "op": "return",
      "stack_out": []
    },
    "336": {
      "block": "main_create_conditional_donation_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "338": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "339": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "340": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "342": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "343": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "346": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "349": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "352": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "tmp%20#0"
      ]
    },
    "354": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "tmp%20#0",
        "1"
      ]
    },
    "355": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "gtxn_idx%1#0"
      ]
    },
    "356": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "357": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "359": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "360": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "361": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "gtxn_idx%1#0"
      ]
    },
    "362": {
      "callsub": "smart_contracts.responsive_donation.contract.ResponsiveDonation.create_conditional_donation",
      "op": "callsub create_conditional_donation",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "365": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "366": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%21#0"
      ]
    },
    "367": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "368": {
      "op": "log",
      "stack_out": []
    },
    "369": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "370": {
      "op": "return",
      "stack_out": []
    },
    "371": {
      "block": "main_instantaneous_payout_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "373": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "374": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "375": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "377": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "378": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "381": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[32]%1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "tmp%14#0"
      ]
    },
    "383": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[32]%1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "tmp%14#0",
        "1"
      ]
    },
    "384": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0"
      ]
    },
    "385": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "386": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "388": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "389": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "390": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0"
      ]
    },
    "391": {
      "callsub": "smart_contracts.responsive_donation.contract.ResponsiveDonation.instantaneous_payout",
      "op": "callsub instantaneous_payout",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "394": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "395": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "396": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "398": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "399": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "400": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "401": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "402": {
      "op": "log",
      "stack_out": []
    },
    "403": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "404": {
      "op": "return",
      "stack_out": []
    },
    "405": {
      "block": "main_create_event_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "407": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "408": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "409": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "411": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "412": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "415": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "418": {
      "callsub": "smart_contracts.responsive_donation.contract.ResponsiveDonation.create_event",
      "op": "callsub create_event",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "421": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "422": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%8#0"
      ]
    },
    "423": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "424": {
      "op": "log",
      "stack_out": []
    },
    "425": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "426": {
      "op": "return",
      "stack_out": []
    },
    "427": {
      "block": "main_bare_routing@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "429": {
      "op": "bnz main_after_if_else@18",
      "stack_out": []
    },
    "432": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "434": {
      "op": "!",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "435": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "436": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "437": {
      "op": "return",
      "stack_out": []
    },
    "438": {
      "subroutine": "smart_contracts.responsive_donation.contract.ResponsiveDonation.create_event",
      "params": {
        "event_string#0": "bytes",
        "oracle_address#0": "bytes"
      },
      "block": "create_event",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "441": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "443": {
      "op": "itob",
      "defined_out": [
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0"
      ]
    },
    "444": {
      "op": "dup",
      "defined_out": [
        "event_id#0",
        "event_id#0 (copy)"
      ],
      "stack_out": [
        "event_id#0",
        "event_id#0 (copy)"
      ]
    },
    "445": {
      "op": "pushbytes 0x002b",
      "defined_out": [
        "0x002b",
        "event_id#0",
        "event_id#0 (copy)"
      ],
      "stack_out": [
        "event_id#0",
        "event_id#0 (copy)",
        "0x002b"
      ]
    },
    "449": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "450": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80",
        "encoded_tuple_buffer%2#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%2#0",
        "0x80"
      ]
    },
    "453": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "454": {
      "op": "intc_3 // 81",
      "defined_out": [
        "81",
        "encoded_tuple_buffer%3#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%3#0",
        "81"
      ]
    },
    "455": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "81",
        "encoded_tuple_buffer%3#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%3#0",
        "81",
        "0"
      ]
    },
    "456": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "457": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "event_id#0",
        "oracle_address#0 (copy)"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%4#0",
        "oracle_address#0 (copy)"
      ]
    },
    "459": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "460": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "event_id#0",
        "event_string#0 (copy)"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%5#0",
        "event_string#0 (copy)"
      ]
    },
    "462": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "463": {
      "op": "bytec_2 // \"events\"",
      "defined_out": [
        "\"events\"",
        "encoded_tuple_buffer%6#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%6#0",
        "\"events\""
      ]
    },
    "464": {
      "op": "dig 2",
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%6#0",
        "\"events\"",
        "event_id#0 (copy)"
      ]
    },
    "466": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%6#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%6#0",
        "box_prefixed_key%0#0"
      ]
    },
    "467": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "encoded_tuple_buffer%6#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%6#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "468": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%6#0",
        "event_id#0",
        "{box_del}"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%6#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "469": {
      "op": "pop",
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%6#0",
        "box_prefixed_key%0#0"
      ]
    },
    "470": {
      "op": "swap",
      "stack_out": [
        "event_id#0",
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "471": {
      "op": "box_put",
      "stack_out": [
        "event_id#0"
      ]
    },
    "472": {
      "retsub": true,
      "op": "retsub"
    },
    "473": {
      "subroutine": "smart_contracts.responsive_donation.contract.ResponsiveDonation.instantaneous_payout",
      "params": {
        "recipient_address#0": "bytes",
        "payment#0": "uint64"
      },
      "block": "instantaneous_payout",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "476": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "478": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "480": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "482": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "483": {
      "error": "Payment must be sent to contract",
      "op": "assert // Payment must be sent to contract",
      "stack_out": []
    },
    "484": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "486": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "488": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "490": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "491": {
      "error": "Payment sender must match transaction sender",
      "op": "assert // Payment sender must match transaction sender",
      "stack_out": []
    },
    "492": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "494": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "496": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "497": {
      "error": "Payment amount must be greater than 0",
      "op": "assert // Payment amount must be greater than 0",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "498": {
      "op": "dup",
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "499": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "1000"
      ]
    },
    "502": {
      "op": ">=",
      "defined_out": [
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%9#0"
      ]
    },
    "503": {
      "error": "Minimum donation is 1000 microAlgos (0.001 ALGO)",
      "op": "assert // Minimum donation is 1000 microAlgos (0.001 ALGO)",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "504": {
      "op": "itxn_begin"
    },
    "505": {
      "op": "frame_dig -2",
      "defined_out": [
        "recipient_address#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "recipient_address#0 (copy)"
      ]
    },
    "507": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "509": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "511": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "512": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "514": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "515": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "517": {
      "op": "itxn_submit"
    },
    "518": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "519": {
      "retsub": true,
      "op": "retsub"
    },
    "520": {
      "subroutine": "smart_contracts.responsive_donation.contract.ResponsiveDonation.create_conditional_donation",
      "params": {
        "event_id#0": "bytes",
        "recipient_yes#0": "bytes",
        "recipient_no#0": "bytes",
        "payment#0": "uint64"
      },
      "block": "create_conditional_donation",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "523": {
      "op": "bytec_2 // \"events\"",
      "defined_out": [
        "\"events\""
      ],
      "stack_out": [
        "\"events\""
      ]
    },
    "524": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"events\"",
        "event_id#0 (copy)"
      ],
      "stack_out": [
        "\"events\"",
        "event_id#0 (copy)"
      ]
    },
    "526": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "527": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "528": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "529": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "531": {
      "error": "Event does not exist",
      "op": "assert // Event does not exist",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "532": {
      "op": "box_get",
      "defined_out": [
        "event_struct#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "event_struct#0",
        "maybe_exists%1#0"
      ]
    },
    "533": {
      "error": "check self.listed_events entry exists",
      "op": "assert // check self.listed_events entry exists",
      "stack_out": [
        "event_struct#0"
      ]
    },
    "534": {
      "op": "intc_2 // 80",
      "defined_out": [
        "80",
        "event_struct#0"
      ],
      "stack_out": [
        "event_struct#0",
        "80"
      ]
    },
    "535": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0"
      ],
      "stack_out": [
        "is_true%0#0"
      ]
    },
    "536": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0"
      ],
      "stack_out": [
        "is_true%0#0",
        "0x00"
      ]
    },
    "537": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "is_true%0#0"
      ],
      "stack_out": [
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "538": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "540": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "541": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "0"
      ]
    },
    "542": {
      "op": "getbit",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "543": {
      "error": "Event has already been resolved",
      "op": "assert // Event has already been resolved",
      "stack_out": []
    },
    "544": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "546": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "548": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "550": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "551": {
      "error": "Payment must be sent to contract",
      "op": "assert // Payment must be sent to contract",
      "stack_out": []
    },
    "552": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "554": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "556": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "558": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "559": {
      "error": "Payment sender must match transaction sender",
      "op": "assert // Payment sender must match transaction sender",
      "stack_out": []
    },
    "560": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "562": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "564": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "565": {
      "error": "Payment amount must be greater than 0",
      "op": "assert // Payment amount must be greater than 0",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "566": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "568": {
      "op": "sha256",
      "defined_out": [
        "sender_hash#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "sender_hash#0"
      ]
    },
    "569": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "sender_hash#0",
        "tmp%10#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "sender_hash#0",
        "tmp%10#0"
      ]
    },
    "571": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "tmp%10#0",
        "sender_hash#0"
      ]
    },
    "572": {
      "op": "substring 0 8",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "575": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "576": {
      "op": "+",
      "defined_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ]
    },
    "577": {
      "op": "itob",
      "defined_out": [
        "clause_id#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "clause_id#0"
      ]
    },
    "578": {
      "op": "dup"
    },
    "579": {
      "op": "uncover 2",
      "defined_out": [
        "clause_id#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "clause_id#0",
        "clause_id#0",
        "tmp%7#0"
      ]
    },
    "581": {
      "op": "itob",
      "defined_out": [
        "clause_id#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "clause_id#0",
        "clause_id#0",
        "val_as_bytes%1#0"
      ]
    },
    "582": {
      "op": "txn Sender",
      "defined_out": [
        "clause_id#0",
        "tmp%13#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "clause_id#0",
        "clause_id#0",
        "val_as_bytes%1#0",
        "tmp%13#0"
      ]
    },
    "584": {
      "op": "dig 2",
      "defined_out": [
        "clause_id#0",
        "clause_id#0 (copy)",
        "tmp%13#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "clause_id#0",
        "clause_id#0",
        "val_as_bytes%1#0",
        "tmp%13#0",
        "clause_id#0 (copy)"
      ]
    },
    "586": {
      "op": "frame_dig -4",
      "stack_out": [
        "clause_id#0",
        "clause_id#0",
        "val_as_bytes%1#0",
        "tmp%13#0",
        "clause_id#0 (copy)",
        "event_id#0 (copy)"
      ]
    },
    "588": {
      "op": "concat",
      "defined_out": [
        "clause_id#0",
        "encoded_tuple_buffer%2#0",
        "tmp%13#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "clause_id#0",
        "clause_id#0",
        "val_as_bytes%1#0",
        "tmp%13#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "589": {
      "op": "uncover 2",
      "stack_out": [
        "clause_id#0",
        "clause_id#0",
        "tmp%13#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "591": {
      "op": "concat",
      "defined_out": [
        "clause_id#0",
        "encoded_tuple_buffer%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "clause_id#0",
        "clause_id#0",
        "tmp%13#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "592": {
      "op": "frame_dig -3",
      "defined_out": [
        "clause_id#0",
        "encoded_tuple_buffer%3#0",
        "recipient_yes#0 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "clause_id#0",
        "clause_id#0",
        "tmp%13#0",
        "encoded_tuple_buffer%3#0",
        "recipient_yes#0 (copy)"
      ]
    },
    "594": {
      "op": "concat",
      "defined_out": [
        "clause_id#0",
        "encoded_tuple_buffer%4#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "clause_id#0",
        "clause_id#0",
        "tmp%13#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "595": {
      "op": "frame_dig -2",
      "defined_out": [
        "clause_id#0",
        "encoded_tuple_buffer%4#0",
        "recipient_no#0 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "clause_id#0",
        "clause_id#0",
        "tmp%13#0",
        "encoded_tuple_buffer%4#0",
        "recipient_no#0 (copy)"
      ]
    },
    "597": {
      "op": "concat",
      "defined_out": [
        "clause_id#0",
        "encoded_tuple_buffer%5#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "clause_id#0",
        "clause_id#0",
        "tmp%13#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "598": {
      "op": "swap",
      "stack_out": [
        "clause_id#0",
        "clause_id#0",
        "encoded_tuple_buffer%5#0",
        "tmp%13#0"
      ]
    },
    "599": {
      "op": "concat",
      "defined_out": [
        "clause_id#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "clause_id#0",
        "clause_id#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "600": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "clause_id#0",
        "clause_id#0",
        "encoded_tuple_buffer%6#0",
        "0x00"
      ]
    },
    "601": {
      "op": "concat",
      "defined_out": [
        "clause_id#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "clause_id#0",
        "clause_id#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "602": {
      "op": "bytec_3 // \"clauses\"",
      "defined_out": [
        "\"clauses\"",
        "clause_id#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "clause_id#0",
        "clause_id#0",
        "encoded_tuple_buffer%7#0",
        "\"clauses\""
      ]
    },
    "603": {
      "op": "uncover 2",
      "stack_out": [
        "clause_id#0",
        "encoded_tuple_buffer%7#0",
        "\"clauses\"",
        "clause_id#0"
      ]
    },
    "605": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%2#0",
        "clause_id#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "clause_id#0",
        "encoded_tuple_buffer%7#0",
        "box_prefixed_key%2#0"
      ]
    },
    "606": {
      "op": "swap",
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%2#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "607": {
      "op": "box_put",
      "stack_out": [
        "clause_id#0"
      ]
    },
    "608": {
      "op": "bytec 4 // \"event_clauses\"",
      "defined_out": [
        "\"event_clauses\"",
        "clause_id#0"
      ],
      "stack_out": [
        "clause_id#0",
        "\"event_clauses\""
      ]
    },
    "610": {
      "op": "frame_dig -4",
      "stack_out": [
        "clause_id#0",
        "\"event_clauses\"",
        "event_id#0 (copy)"
      ]
    },
    "612": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0"
      ],
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0"
      ]
    },
    "613": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0"
      ],
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0"
      ]
    },
    "614": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "box_prefixed_key%3#0",
        "clause_id#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "_%1#0",
        "maybe_exists%2#0"
      ]
    },
    "615": {
      "op": "bury 1",
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "maybe_exists%2#0"
      ]
    },
    "617": {
      "op": "bz create_conditional_donation_else_body@2",
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0"
      ]
    },
    "620": {
      "op": "frame_dig 1",
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0"
      ]
    },
    "622": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0 (copy)",
        "clause_id#0"
      ],
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0 (copy)"
      ]
    },
    "623": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "existing_clauses#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0",
        "existing_clauses#0",
        "maybe_exists%3#0"
      ]
    },
    "624": {
      "error": "check self.event_clauses entry exists",
      "op": "assert // check self.event_clauses entry exists",
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0",
        "existing_clauses#0"
      ]
    },
    "625": {
      "op": "extract 2 0",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "628": {
      "op": "frame_dig 0",
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0",
        "expr_value_trimmed%0#0",
        "clause_id#0"
      ]
    },
    "630": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0",
        "concatenated%0#0"
      ]
    },
    "631": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ],
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "632": {
      "op": "len",
      "defined_out": [
        "box_prefixed_key%3#0",
        "byte_len%0#0",
        "clause_id#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "633": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "box_prefixed_key%3#0",
        "byte_len%0#0",
        "clause_id#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "8"
      ]
    },
    "635": {
      "op": "/",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "concatenated%0#0",
        "len_%0#0"
      ],
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "636": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "box_prefixed_key%3#0",
        "clause_id#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "637": {
      "op": "extract 6 2",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "640": {
      "op": "swap",
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "641": {
      "op": "concat",
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0",
        "existing_clauses#0"
      ]
    },
    "642": {
      "op": "dig 1",
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0",
        "existing_clauses#0",
        "box_prefixed_key%3#0 (copy)"
      ]
    },
    "644": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "existing_clauses#0",
        "{box_del}"
      ],
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0",
        "existing_clauses#0",
        "{box_del}"
      ]
    },
    "645": {
      "op": "pop",
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0",
        "existing_clauses#0"
      ]
    },
    "646": {
      "op": "box_put",
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0"
      ]
    },
    "647": {
      "retsub": true,
      "op": "retsub",
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "clause_id#0"
      ]
    },
    "648": {
      "block": "create_conditional_donation_else_body@2",
      "stack_in": [
        "clause_id#0",
        "box_prefixed_key%3#0"
      ],
      "op": "bytec 5 // 0x0001",
      "defined_out": [
        "0x0001"
      ],
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "0x0001"
      ]
    },
    "650": {
      "op": "frame_dig 0",
      "defined_out": [
        "0x0001",
        "clause_id#0"
      ],
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "0x0001",
        "clause_id#0"
      ]
    },
    "652": {
      "op": "concat",
      "defined_out": [
        "clause_id#0",
        "new_clause_array#0"
      ],
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "new_clause_array#0"
      ]
    },
    "653": {
      "op": "frame_dig 1",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "new_clause_array#0"
      ],
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "new_clause_array#0",
        "box_prefixed_key%3#0"
      ]
    },
    "655": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0 (copy)",
        "clause_id#0",
        "new_clause_array#0"
      ],
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "new_clause_array#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0 (copy)"
      ]
    },
    "656": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "new_clause_array#0",
        "{box_del}"
      ],
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "new_clause_array#0",
        "box_prefixed_key%3#0",
        "{box_del}"
      ]
    },
    "657": {
      "op": "pop",
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "new_clause_array#0",
        "box_prefixed_key%3#0"
      ]
    },
    "658": {
      "op": "swap",
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0",
        "new_clause_array#0"
      ]
    },
    "659": {
      "op": "box_put",
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0"
      ]
    },
    "660": {
      "retsub": true,
      "op": "retsub",
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%3#0",
        "clause_id#0"
      ]
    },
    "661": {
      "subroutine": "smart_contracts.responsive_donation.contract.ResponsiveDonation.mixed_donation",
      "params": {
        "instant_recipient#0": "bytes",
        "instant_amount#0": "bytes",
        "event_id#0": "bytes",
        "recipient_yes#0": "bytes",
        "recipient_no#0": "bytes",
        "payment#0": "uint64"
      },
      "block": "mixed_donation",
      "stack_in": [],
      "op": "proto 6 1"
    },
    "664": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%3#0"
      ]
    },
    "665": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0"
      ]
    },
    "666": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "payment#0 (copy)"
      ]
    },
    "668": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%0#0"
      ]
    },
    "670": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "672": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%2#0"
      ]
    },
    "673": {
      "error": "Payment must be sent to contract",
      "op": "assert // Payment must be sent to contract",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0"
      ]
    },
    "674": {
      "op": "frame_dig -1",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "payment#0 (copy)"
      ]
    },
    "676": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%3#0"
      ]
    },
    "678": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "680": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%5#0"
      ]
    },
    "681": {
      "error": "Payment sender must match transaction sender",
      "op": "assert // Payment sender must match transaction sender",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0"
      ]
    },
    "682": {
      "op": "frame_dig -1",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "payment#0 (copy)"
      ]
    },
    "684": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%6#0"
      ]
    },
    "686": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "687": {
      "error": "Payment amount must be greater than 0",
      "op": "assert // Payment amount must be greater than 0",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%6#0"
      ]
    },
    "688": {
      "op": "frame_dig -5",
      "defined_out": [
        "instant_amount#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%6#0",
        "instant_amount#0 (copy)"
      ]
    },
    "690": {
      "op": "btoi",
      "defined_out": [
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%6#0",
        "tmp%9#0"
      ]
    },
    "691": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%6#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "692": {
      "op": "cover 2",
      "defined_out": [
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "tmp%6#0",
        "tmp%9#0"
      ]
    },
    "694": {
      "op": "dup2",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "tmp%6#0",
        "tmp%9#0",
        "tmp%6#0 (copy)",
        "tmp%9#0 (copy)"
      ]
    },
    "695": {
      "op": "-",
      "defined_out": [
        "tmp%6#0",
        "tmp%9#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "tmp%6#0",
        "tmp%9#0",
        "to_encode%0#0"
      ]
    },
    "696": {
      "op": "itob",
      "defined_out": [
        "conditional_amount#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "tmp%6#0",
        "tmp%9#0",
        "conditional_amount#0"
      ]
    },
    "697": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "tmp%6#0",
        "tmp%9#0",
        "conditional_amount#0",
        "conditional_amount#0"
      ]
    },
    "698": {
      "op": "cover 3",
      "defined_out": [
        "conditional_amount#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "tmp%6#0",
        "tmp%9#0",
        "conditional_amount#0"
      ]
    },
    "700": {
      "op": "btoi",
      "defined_out": [
        "conditional_amount#0",
        "tmp%10#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "tmp%6#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "701": {
      "op": "dup",
      "defined_out": [
        "conditional_amount#0",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "tmp%6#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "702": {
      "error": "Conditional amount must be greater than 0",
      "op": "assert // Conditional amount must be greater than 0",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "tmp%6#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "703": {
      "op": "dig 1",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "tmp%6#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%9#0 (copy)"
      ]
    },
    "705": {
      "op": "+",
      "defined_out": [
        "conditional_amount#0",
        "tmp%6#0",
        "tmp%9#0",
        "total_required#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "tmp%6#0",
        "tmp%9#0",
        "total_required#0"
      ]
    },
    "706": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "tmp%9#0",
        "total_required#0",
        "tmp%6#0"
      ]
    },
    "708": {
      "op": "==",
      "defined_out": [
        "conditional_amount#0",
        "tmp%15#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "tmp%9#0",
        "tmp%15#0"
      ]
    },
    "709": {
      "error": "Payment amount must equal sum of donations",
      "op": "assert // Payment amount must equal sum of donations",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "tmp%9#0"
      ]
    },
    "710": {
      "op": "bz mixed_donation_after_if_else@3",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0"
      ]
    },
    "713": {
      "op": "itxn_begin"
    },
    "714": {
      "op": "frame_dig -6",
      "defined_out": [
        "conditional_amount#0",
        "instant_recipient#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "instant_recipient#0 (copy)"
      ]
    },
    "716": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0"
      ]
    },
    "718": {
      "op": "frame_dig 2",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "tmp%9#0"
      ]
    },
    "720": {
      "op": "itxn_field Amount",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0"
      ]
    },
    "722": {
      "op": "intc_1 // pay",
      "defined_out": [
        "conditional_amount#0",
        "pay",
        "tmp%9#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "pay"
      ]
    },
    "723": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0"
      ]
    },
    "725": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "0"
      ]
    },
    "726": {
      "op": "itxn_field Fee",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0"
      ]
    },
    "728": {
      "op": "itxn_submit"
    },
    "729": {
      "block": "mixed_donation_after_if_else@3",
      "stack_in": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0"
      ],
      "op": "bytec_2 // \"events\"",
      "defined_out": [
        "\"events\""
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "\"events\""
      ]
    },
    "730": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"events\"",
        "event_id#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "\"events\"",
        "event_id#0 (copy)"
      ]
    },
    "732": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%0#0"
      ]
    },
    "733": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "734": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "735": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "737": {
      "error": "Event does not exist",
      "op": "assert // Event does not exist",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%0#0"
      ]
    },
    "738": {
      "op": "box_get",
      "defined_out": [
        "event_struct#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "event_struct#0",
        "maybe_exists%1#0"
      ]
    },
    "739": {
      "error": "check self.listed_events entry exists",
      "op": "assert // check self.listed_events entry exists",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "event_struct#0"
      ]
    },
    "740": {
      "op": "intc_2 // 80",
      "defined_out": [
        "80",
        "event_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "event_struct#0",
        "80"
      ]
    },
    "741": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "is_true%0#0"
      ]
    },
    "742": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "743": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "is_true%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "744": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "746": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "encoded_bool%0#0"
      ]
    },
    "747": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "748": {
      "op": "getbit",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "tmp%18#0"
      ]
    },
    "749": {
      "error": "Event has already been resolved",
      "op": "assert // Event has already been resolved",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0"
      ]
    },
    "750": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "tmp%19#0"
      ]
    },
    "752": {
      "op": "sha256",
      "defined_out": [
        "sender_hash#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "sender_hash#0"
      ]
    },
    "753": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "sender_hash#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "sender_hash#0",
        "tmp%20#0"
      ]
    },
    "755": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "tmp%20#0",
        "sender_hash#0"
      ]
    },
    "756": {
      "op": "substring 0 8",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "759": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "tmp%20#0",
        "tmp%22#0"
      ]
    },
    "760": {
      "op": "+",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "tmp%23#0"
      ]
    },
    "761": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%23#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "tmp%23#0",
        "1"
      ]
    },
    "762": {
      "op": "+",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "to_encode%1#0"
      ]
    },
    "763": {
      "op": "itob",
      "defined_out": [
        "clause_id#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "clause_id#0"
      ]
    },
    "764": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "clause_id#0",
        "clause_id#0"
      ]
    },
    "765": {
      "op": "frame_bury 1",
      "defined_out": [
        "clause_id#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "clause_id#0"
      ]
    },
    "767": {
      "op": "txn Sender",
      "defined_out": [
        "clause_id#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "clause_id#0",
        "tmp%24#0"
      ]
    },
    "769": {
      "op": "dig 1",
      "defined_out": [
        "clause_id#0",
        "clause_id#0 (copy)",
        "tmp%24#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "clause_id#0",
        "tmp%24#0",
        "clause_id#0 (copy)"
      ]
    },
    "771": {
      "op": "frame_dig -4",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "clause_id#0",
        "tmp%24#0",
        "clause_id#0 (copy)",
        "event_id#0 (copy)"
      ]
    },
    "773": {
      "op": "concat",
      "defined_out": [
        "clause_id#0",
        "encoded_tuple_buffer%2#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "clause_id#0",
        "tmp%24#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "774": {
      "op": "frame_dig 3",
      "defined_out": [
        "clause_id#0",
        "conditional_amount#0",
        "encoded_tuple_buffer%2#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "clause_id#0",
        "tmp%24#0",
        "encoded_tuple_buffer%2#0",
        "conditional_amount#0"
      ]
    },
    "776": {
      "op": "concat",
      "defined_out": [
        "clause_id#0",
        "conditional_amount#0",
        "encoded_tuple_buffer%3#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "clause_id#0",
        "tmp%24#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "777": {
      "op": "frame_dig -3",
      "defined_out": [
        "clause_id#0",
        "conditional_amount#0",
        "encoded_tuple_buffer%3#0",
        "recipient_yes#0 (copy)",
        "tmp%24#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "clause_id#0",
        "tmp%24#0",
        "encoded_tuple_buffer%3#0",
        "recipient_yes#0 (copy)"
      ]
    },
    "779": {
      "op": "concat",
      "defined_out": [
        "clause_id#0",
        "conditional_amount#0",
        "encoded_tuple_buffer%4#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "clause_id#0",
        "tmp%24#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "780": {
      "op": "frame_dig -2",
      "defined_out": [
        "clause_id#0",
        "conditional_amount#0",
        "encoded_tuple_buffer%4#0",
        "recipient_no#0 (copy)",
        "tmp%24#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "clause_id#0",
        "tmp%24#0",
        "encoded_tuple_buffer%4#0",
        "recipient_no#0 (copy)"
      ]
    },
    "782": {
      "op": "concat",
      "defined_out": [
        "clause_id#0",
        "conditional_amount#0",
        "encoded_tuple_buffer%5#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "clause_id#0",
        "tmp%24#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "783": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "clause_id#0",
        "encoded_tuple_buffer%5#0",
        "tmp%24#0"
      ]
    },
    "784": {
      "op": "concat",
      "defined_out": [
        "clause_id#0",
        "conditional_amount#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "clause_id#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "785": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "clause_id#0",
        "encoded_tuple_buffer%6#0",
        "0x00"
      ]
    },
    "786": {
      "op": "concat",
      "defined_out": [
        "clause_id#0",
        "conditional_amount#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "clause_id#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "787": {
      "op": "bytec_3 // \"clauses\"",
      "defined_out": [
        "\"clauses\"",
        "clause_id#0",
        "conditional_amount#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "clause_id#0",
        "encoded_tuple_buffer%7#0",
        "\"clauses\""
      ]
    },
    "788": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "encoded_tuple_buffer%7#0",
        "\"clauses\"",
        "clause_id#0"
      ]
    },
    "790": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%2#0",
        "clause_id#0",
        "conditional_amount#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "encoded_tuple_buffer%7#0",
        "box_prefixed_key%2#0"
      ]
    },
    "791": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%2#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "792": {
      "op": "box_put",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0"
      ]
    },
    "793": {
      "op": "bytec 4 // \"event_clauses\"",
      "defined_out": [
        "\"event_clauses\"",
        "clause_id#0",
        "conditional_amount#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "\"event_clauses\""
      ]
    },
    "795": {
      "op": "frame_dig -4",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "\"event_clauses\"",
        "event_id#0 (copy)"
      ]
    },
    "797": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "conditional_amount#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0"
      ]
    },
    "798": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0"
      ]
    },
    "799": {
      "op": "frame_bury 0",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "conditional_amount#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0"
      ]
    },
    "801": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "box_prefixed_key%3#0",
        "clause_id#0",
        "conditional_amount#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "_%1#0",
        "maybe_exists%2#0"
      ]
    },
    "802": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "maybe_exists%2#0"
      ]
    },
    "804": {
      "op": "bz mixed_donation_else_body@5",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0"
      ]
    },
    "807": {
      "op": "frame_dig 0",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0"
      ]
    },
    "809": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0 (copy)",
        "clause_id#0",
        "conditional_amount#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0 (copy)"
      ]
    },
    "810": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "conditional_amount#0",
        "existing_clauses#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0",
        "existing_clauses#0",
        "maybe_exists%3#0"
      ]
    },
    "811": {
      "error": "check self.event_clauses entry exists",
      "op": "assert // check self.event_clauses entry exists",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0",
        "existing_clauses#0"
      ]
    },
    "812": {
      "op": "extract 2 0",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "conditional_amount#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "815": {
      "op": "frame_dig 1",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0",
        "expr_value_trimmed%0#0",
        "clause_id#0"
      ]
    },
    "817": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "concatenated%0#0",
        "conditional_amount#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0",
        "concatenated%0#0"
      ]
    },
    "818": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "conditional_amount#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "819": {
      "op": "len",
      "defined_out": [
        "box_prefixed_key%3#0",
        "byte_len%0#0",
        "clause_id#0",
        "concatenated%0#0",
        "conditional_amount#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "820": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "box_prefixed_key%3#0",
        "byte_len%0#0",
        "clause_id#0",
        "concatenated%0#0",
        "conditional_amount#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "8"
      ]
    },
    "822": {
      "op": "/",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "concatenated%0#0",
        "conditional_amount#0",
        "len_%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "823": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "box_prefixed_key%3#0",
        "clause_id#0",
        "concatenated%0#0",
        "conditional_amount#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "824": {
      "op": "extract 6 2",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "concatenated%0#0",
        "conditional_amount#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "827": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "828": {
      "op": "concat",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0",
        "existing_clauses#0"
      ]
    },
    "829": {
      "op": "dig 1",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0",
        "existing_clauses#0",
        "box_prefixed_key%3#0 (copy)"
      ]
    },
    "831": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "conditional_amount#0",
        "existing_clauses#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0",
        "existing_clauses#0",
        "{box_del}"
      ]
    },
    "832": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0",
        "existing_clauses#0"
      ]
    },
    "833": {
      "op": "box_put",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0"
      ]
    },
    "834": {
      "block": "mixed_donation_after_if_else@6",
      "stack_in": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "clause_id#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "clause_id#0"
      ]
    },
    "836": {
      "op": "frame_bury 0"
    },
    "838": {
      "retsub": true,
      "op": "retsub"
    },
    "839": {
      "block": "mixed_donation_else_body@5",
      "stack_in": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0"
      ],
      "op": "bytec 5 // 0x0001",
      "defined_out": [
        "0x0001"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "0x0001"
      ]
    },
    "841": {
      "op": "frame_dig 1",
      "defined_out": [
        "0x0001",
        "clause_id#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "0x0001",
        "clause_id#0"
      ]
    },
    "843": {
      "op": "concat",
      "defined_out": [
        "clause_id#0",
        "new_clause_array#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "new_clause_array#0"
      ]
    },
    "844": {
      "op": "frame_dig 0",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "new_clause_array#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "new_clause_array#0",
        "box_prefixed_key%3#0"
      ]
    },
    "846": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0 (copy)",
        "clause_id#0",
        "new_clause_array#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "new_clause_array#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0 (copy)"
      ]
    },
    "847": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "new_clause_array#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "new_clause_array#0",
        "box_prefixed_key%3#0",
        "{box_del}"
      ]
    },
    "848": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "new_clause_array#0",
        "box_prefixed_key%3#0"
      ]
    },
    "849": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0",
        "box_prefixed_key%3#0",
        "new_clause_array#0"
      ]
    },
    "850": {
      "op": "box_put",
      "stack_out": [
        "box_prefixed_key%3#0",
        "clause_id#0",
        "tmp%9#0",
        "conditional_amount#0"
      ]
    },
    "851": {
      "op": "b mixed_donation_after_if_else@6"
    },
    "854": {
      "subroutine": "smart_contracts.responsive_donation.contract.ResponsiveDonation.resolve_event",
      "params": {
        "event_id#0": "bytes",
        "resolution#0": "bytes"
      },
      "block": "resolve_event",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "857": {
      "op": "bytec_2 // \"events\"",
      "defined_out": [
        "\"events\""
      ],
      "stack_out": [
        "\"events\""
      ]
    },
    "858": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"events\"",
        "event_id#0 (copy)"
      ],
      "stack_out": [
        "\"events\"",
        "event_id#0 (copy)"
      ]
    },
    "860": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "861": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "862": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "863": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "865": {
      "error": "Event does not exist",
      "op": "assert // Event does not exist",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "866": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "867": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "maybe_exists%1#0"
      ]
    },
    "868": {
      "error": "check self.listed_events entry exists",
      "op": "assert // check self.listed_events entry exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0"
      ]
    },
    "869": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "event_struct#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "event_struct#0 (copy)"
      ]
    },
    "870": {
      "op": "intc_2 // 80",
      "defined_out": [
        "80",
        "box_prefixed_key%0#0",
        "event_struct#0",
        "event_struct#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "event_struct#0 (copy)",
        "80"
      ]
    },
    "871": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "is_true%0#0"
      ]
    },
    "872": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "box_prefixed_key%0#0",
        "event_struct#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "873": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "box_prefixed_key%0#0",
        "event_struct#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "874": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "876": {
      "op": "setbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_bool%0#0",
        "event_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "encoded_bool%0#0"
      ]
    },
    "877": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "878": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "tmp%0#0"
      ]
    },
    "879": {
      "error": "Event has already been resolved",
      "op": "assert // Event has already been resolved",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0"
      ]
    },
    "880": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "tmp%1#0"
      ]
    },
    "882": {
      "op": "dig 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "tmp%1#0",
        "event_struct#0 (copy)"
      ]
    },
    "884": {
      "error": "Index access is out of bounds",
      "op": "extract 11 32 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "tmp%1#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "887": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "tmp%2#0"
      ]
    },
    "888": {
      "error": "Only authorized oracle can resolve event",
      "op": "assert // Only authorized oracle can resolve event",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0"
      ]
    },
    "889": {
      "op": "intc_2 // 80",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "80"
      ]
    },
    "890": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "80",
        "0"
      ]
    },
    "891": {
      "op": "setbit",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0"
      ]
    },
    "892": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "resolution#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "resolution#0 (copy)"
      ]
    },
    "894": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "resolution#0 (copy)",
        "0"
      ]
    },
    "895": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "is_true%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "is_true%2#0"
      ]
    },
    "896": {
      "op": "intc_3 // 81"
    },
    "897": {
      "op": "swap",
      "defined_out": [
        "81",
        "box_prefixed_key%0#0",
        "event_struct#0",
        "is_true%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "81",
        "is_true%2#0"
      ]
    },
    "898": {
      "op": "setbit",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0"
      ]
    },
    "899": {
      "op": "dig 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "901": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "{box_del}"
      ]
    },
    "902": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0"
      ]
    },
    "903": {
      "op": "box_put",
      "stack_out": []
    },
    "904": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "905": {
      "retsub": true,
      "op": "retsub"
    },
    "906": {
      "subroutine": "smart_contracts.responsive_donation.contract.ResponsiveDonation.execute_conditional_clause",
      "params": {
        "clause_id#0": "bytes"
      },
      "block": "execute_conditional_clause",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "909": {
      "op": "bytec_3 // \"clauses\"",
      "defined_out": [
        "\"clauses\""
      ],
      "stack_out": [
        "\"clauses\""
      ]
    },
    "910": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"clauses\"",
        "clause_id#0 (copy)"
      ],
      "stack_out": [
        "\"clauses\"",
        "clause_id#0 (copy)"
      ]
    },
    "912": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "913": {
      "op": "dupn 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "915": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "916": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "918": {
      "error": "Clause does not exist",
      "op": "assert // Clause does not exist",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "919": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "maybe_exists%1#0"
      ]
    },
    "920": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%1#0",
        "clause_struct#0"
      ]
    },
    "921": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%1#0",
        "clause_struct#0",
        "clause_struct#0 (copy)"
      ]
    },
    "922": {
      "op": "uncover 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "maybe_exists%1#0"
      ]
    },
    "924": {
      "error": "check self.conditional_clauses entry exists",
      "op": "assert // check self.conditional_clauses entry exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0"
      ]
    },
    "925": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "clause_struct#0 (copy)"
      ]
    },
    "926": {
      "op": "intc 4 // 960",
      "defined_out": [
        "960",
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "clause_struct#0 (copy)",
        "960"
      ]
    },
    "928": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "is_true%0#0"
      ]
    },
    "929": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "930": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "931": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "933": {
      "op": "setbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "encoded_bool%0#0"
      ]
    },
    "934": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "935": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "tmp%0#0"
      ]
    },
    "936": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "tmp%1#0"
      ]
    },
    "937": {
      "error": "Clause has already been executed",
      "op": "assert // Clause has already been executed",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0"
      ]
    },
    "938": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "materialized_values%0#0"
      ]
    },
    "941": {
      "op": "bytec_2 // \"events\"",
      "defined_out": [
        "\"events\"",
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "materialized_values%0#0",
        "\"events\""
      ]
    },
    "942": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "\"events\"",
        "materialized_values%0#0"
      ]
    },
    "943": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%2#0",
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "box_prefixed_key%2#0"
      ]
    },
    "944": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%2#0",
        "box_prefixed_key%2#0 (copy)",
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "box_prefixed_key%2#0",
        "box_prefixed_key%2#0 (copy)"
      ]
    },
    "945": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%2#0",
        "clause_struct#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "box_prefixed_key%2#0",
        "_%1#0",
        "maybe_exists%2#0"
      ]
    },
    "946": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "box_prefixed_key%2#0",
        "maybe_exists%2#0"
      ]
    },
    "948": {
      "error": "Associated event does not exist",
      "op": "assert // Associated event does not exist",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "box_prefixed_key%2#0"
      ]
    },
    "949": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "maybe_exists%3#0"
      ]
    },
    "950": {
      "error": "check self.listed_events entry exists",
      "op": "assert // check self.listed_events entry exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0"
      ]
    },
    "951": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "event_struct#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "event_struct#0 (copy)"
      ]
    },
    "952": {
      "op": "intc_2 // 80",
      "defined_out": [
        "80",
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "event_struct#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "event_struct#0 (copy)",
        "80"
      ]
    },
    "953": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "is_true%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "is_true%1#0"
      ]
    },
    "954": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "is_true%1#0",
        "0x00"
      ]
    },
    "955": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "is_true%1#0",
        "0x00",
        "0"
      ]
    },
    "956": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "0x00",
        "0",
        "is_true%1#0"
      ]
    },
    "958": {
      "op": "setbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "encoded_bool%1#0",
        "event_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "encoded_bool%1#0"
      ]
    },
    "959": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "960": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "tmp%2#0"
      ]
    },
    "961": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "tmp%3#0"
      ]
    },
    "962": {
      "error": "Event has not been resolved yet",
      "op": "assert // Event has not been resolved yet",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0"
      ]
    },
    "963": {
      "op": "intc_3 // 81",
      "defined_out": [
        "81",
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "81"
      ]
    },
    "964": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "is_true%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "is_true%2#0"
      ]
    },
    "965": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "is_true%2#0",
        "0x00"
      ]
    },
    "966": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "is_true%2#0",
        "0x00",
        "0"
      ]
    },
    "967": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "0x00",
        "0",
        "is_true%2#0"
      ]
    },
    "969": {
      "op": "setbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "encoded_bool%2#0"
      ]
    },
    "970": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "encoded_bool%2#0",
        "0"
      ]
    },
    "971": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "tmp%4#0"
      ]
    },
    "972": {
      "op": "bz execute_conditional_clause_else_body@2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0"
      ]
    },
    "975": {
      "op": "frame_dig 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0"
      ]
    },
    "977": {
      "error": "Index access is out of bounds",
      "op": "extract 24 32 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "recipient#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "recipient#0"
      ]
    },
    "980": {
      "block": "execute_conditional_clause_after_if_else@3",
      "stack_in": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "recipient#0"
      ],
      "op": "itxn_begin"
    },
    "981": {
      "op": "frame_dig 1",
      "defined_out": [
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "recipient#0",
        "clause_struct#0"
      ]
    },
    "983": {
      "op": "dup",
      "defined_out": [
        "clause_struct#0",
        "clause_struct#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "recipient#0",
        "clause_struct#0",
        "clause_struct#0 (copy)"
      ]
    },
    "984": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "clause_struct#0",
        "clause_struct#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "recipient#0",
        "clause_struct#0",
        "clause_struct#0 (copy)",
        "16"
      ]
    },
    "986": {
      "op": "extract_uint64",
      "defined_out": [
        "clause_struct#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "recipient#0",
        "clause_struct#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "987": {
      "op": "uncover 2",
      "defined_out": [
        "clause_struct#0",
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "recipient#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "recipient#0"
      ]
    },
    "989": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "991": {
      "op": "itxn_field Amount",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0"
      ]
    },
    "993": {
      "op": "intc_1 // pay",
      "defined_out": [
        "clause_struct#0",
        "pay"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "pay"
      ]
    },
    "994": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0"
      ]
    },
    "996": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "0"
      ]
    },
    "997": {
      "op": "itxn_field Fee",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0"
      ]
    },
    "999": {
      "op": "itxn_submit"
    },
    "1000": {
      "op": "intc 4 // 960",
      "defined_out": [
        "960",
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "960"
      ]
    },
    "1002": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "960",
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "960",
        "1"
      ]
    },
    "1003": {
      "op": "setbit",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0"
      ]
    },
    "1004": {
      "op": "frame_dig 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1006": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "box_prefixed_key%0#0",
        "clause_struct#0"
      ]
    },
    "1007": {
      "op": "box_put",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0"
      ]
    },
    "1008": {
      "op": "intc_1 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "1"
      ]
    },
    "1009": {
      "op": "frame_bury 0"
    },
    "1011": {
      "retsub": true,
      "op": "retsub"
    },
    "1012": {
      "block": "execute_conditional_clause_else_body@2",
      "stack_in": [
        "box_prefixed_key%0#0",
        "clause_struct#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0"
      ]
    },
    "1014": {
      "error": "Index access is out of bounds",
      "op": "extract 56 32 // on error: Index access is out of bounds",
      "defined_out": [
        "clause_struct#0",
        "recipient#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "recipient#0"
      ]
    },
    "1017": {
      "op": "b execute_conditional_clause_after_if_else@3"
    },
    "1020": {
      "subroutine": "smart_contracts.responsive_donation.contract.ResponsiveDonation.execute_clauses_for_event",
      "params": {
        "event_id#0": "bytes"
      },
      "block": "execute_clauses_for_event",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1023": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%4#0"
      ]
    },
    "1024": {
      "op": "dupn 4",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11"
      ]
    },
    "1026": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0"
      ]
    },
    "1028": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0"
      ]
    },
    "1029": {
      "op": "bytec_2 // \"events\"",
      "defined_out": [
        "\"events\""
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "\"events\""
      ]
    },
    "1030": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"events\"",
        "event_id#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "\"events\"",
        "event_id#0 (copy)"
      ]
    },
    "1032": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1033": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1034": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1035": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1037": {
      "error": "Event does not exist",
      "op": "assert // Event does not exist",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1038": {
      "op": "box_get",
      "defined_out": [
        "event_struct#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "maybe_exists%1#0"
      ]
    },
    "1039": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "maybe_exists%1#0",
        "event_struct#0"
      ]
    },
    "1040": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "maybe_exists%1#0",
        "event_struct#0",
        "event_struct#0 (copy)"
      ]
    },
    "1041": {
      "op": "uncover 2",
      "defined_out": [
        "event_struct#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "event_struct#0",
        "maybe_exists%1#0"
      ]
    },
    "1043": {
      "error": "check self.listed_events entry exists",
      "op": "assert // check self.listed_events entry exists",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "event_struct#0"
      ]
    },
    "1044": {
      "op": "intc_2 // 80",
      "defined_out": [
        "80",
        "event_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "event_struct#0",
        "80"
      ]
    },
    "1045": {
      "op": "getbit",
      "defined_out": [
        "event_struct#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "is_true%0#0"
      ]
    },
    "1046": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "event_struct#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1047": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1048": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1050": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "event_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "encoded_bool%0#0"
      ]
    },
    "1051": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "1052": {
      "op": "getbit",
      "defined_out": [
        "event_struct#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "tmp%0#0"
      ]
    },
    "1053": {
      "op": "!",
      "defined_out": [
        "event_struct#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "tmp%1#0"
      ]
    },
    "1054": {
      "error": "Event has not been resolved yet",
      "op": "assert // Event has not been resolved yet",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0"
      ]
    },
    "1055": {
      "op": "bytec 4 // \"event_clauses\"",
      "defined_out": [
        "\"event_clauses\"",
        "event_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "\"event_clauses\""
      ]
    },
    "1057": {
      "op": "frame_dig -1",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "\"event_clauses\"",
        "event_id#0 (copy)"
      ]
    },
    "1059": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%2#0",
        "event_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0"
      ]
    },
    "1060": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%2#0",
        "event_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "box_prefixed_key%2#0"
      ]
    },
    "1061": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "box_prefixed_key%2#0",
        "event_struct#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "_%1#0",
        "maybe_exists%2#0"
      ]
    },
    "1062": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1064": {
      "op": "bnz execute_clauses_for_event_after_if_else@2",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0"
      ]
    },
    "1067": {
      "op": "bytec 6 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "box_prefixed_key%2#0",
        "event_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "0x0000000000000000"
      ]
    },
    "1069": {
      "op": "frame_bury 0"
    },
    "1071": {
      "retsub": true,
      "op": "retsub"
    },
    "1072": {
      "block": "execute_clauses_for_event_after_if_else@2",
      "stack_in": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "box_prefixed_key%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "box_prefixed_key%2#0"
      ]
    },
    "1074": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%2#0",
        "clause_ids#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_ids#0",
        "maybe_exists%3#0"
      ]
    },
    "1075": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "maybe_exists%3#0",
        "clause_ids#0"
      ]
    },
    "1076": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "maybe_exists%3#0",
        "clause_ids#0",
        "clause_ids#0 (copy)"
      ]
    },
    "1077": {
      "op": "cover 2",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_ids#0",
        "maybe_exists%3#0",
        "clause_ids#0"
      ]
    },
    "1079": {
      "op": "frame_bury 1",
      "defined_out": [
        "box_prefixed_key%2#0",
        "clause_ids#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_ids#0",
        "maybe_exists%3#0"
      ]
    },
    "1081": {
      "error": "check self.event_clauses entry exists",
      "op": "assert // check self.event_clauses entry exists",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_ids#0"
      ]
    },
    "1082": {
      "op": "bytec 6 // 0x0000000000000000",
      "defined_out": [
        "box_prefixed_key%2#0",
        "clause_ids#0",
        "executed_count#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_ids#0",
        "executed_count#0"
      ]
    },
    "1084": {
      "op": "frame_bury 3",
      "defined_out": [
        "box_prefixed_key%2#0",
        "clause_ids#0",
        "executed_count#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_ids#0"
      ]
    },
    "1086": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_ids#0",
        "0"
      ]
    },
    "1087": {
      "op": "extract_uint16",
      "defined_out": [
        "box_prefixed_key%2#0",
        "clause_ids#0",
        "executed_count#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "tmp%2#0"
      ]
    },
    "1088": {
      "op": "frame_bury 6",
      "defined_out": [
        "box_prefixed_key%2#0",
        "clause_ids#0",
        "executed_count#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0"
      ]
    },
    "1090": {
      "op": "intc_0 // 0",
      "defined_out": [
        "box_prefixed_key%2#0",
        "clause_ids#0",
        "executed_count#0",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "i#0"
      ]
    },
    "1091": {
      "op": "frame_bury 5",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0"
      ]
    },
    "1093": {
      "block": "execute_clauses_for_event_for_header@3",
      "stack_in": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "i#0"
      ]
    },
    "1095": {
      "op": "frame_dig 6",
      "defined_out": [
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "i#0",
        "tmp%2#0"
      ]
    },
    "1097": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "continue_looping%0#0"
      ]
    },
    "1098": {
      "op": "bz execute_clauses_for_event_after_for@14",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0"
      ]
    },
    "1101": {
      "op": "frame_dig 1",
      "defined_out": [
        "clause_ids#0",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_ids#0"
      ]
    },
    "1103": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "clause_ids#0",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1106": {
      "op": "frame_dig 5",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "array_head_and_tail%0#0",
        "i#0"
      ]
    },
    "1108": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "array_head_and_tail%0#0",
        "clause_ids#0",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "array_head_and_tail%0#0",
        "i#0",
        "8"
      ]
    },
    "1110": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "clause_ids#0",
        "i#0",
        "item_offset%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1111": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "8"
      ]
    },
    "1113": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "clause_id#0",
        "clause_ids#0",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_id#0"
      ]
    },
    "1114": {
      "op": "bytec_3 // \"clauses\"",
      "defined_out": [
        "\"clauses\"",
        "clause_id#0",
        "clause_ids#0",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_id#0",
        "\"clauses\""
      ]
    },
    "1115": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "\"clauses\"",
        "clause_id#0"
      ]
    },
    "1116": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "box_prefixed_key%4#0"
      ]
    },
    "1117": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "box_prefixed_key%4#0",
        "box_prefixed_key%4#0"
      ]
    },
    "1118": {
      "op": "frame_bury 0",
      "defined_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "box_prefixed_key%4#0"
      ]
    },
    "1120": {
      "op": "box_len",
      "defined_out": [
        "_%2#0",
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "i#0",
        "maybe_exists%4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "_%2#0",
        "maybe_exists%4#0"
      ]
    },
    "1121": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "maybe_exists%4#0"
      ]
    },
    "1123": {
      "op": "frame_dig 3",
      "defined_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "executed_count#11",
        "i#0",
        "maybe_exists%4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "maybe_exists%4#0",
        "executed_count#11"
      ]
    },
    "1125": {
      "op": "frame_bury 4",
      "defined_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "executed_count#11",
        "i#0",
        "maybe_exists%4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "maybe_exists%4#0"
      ]
    },
    "1127": {
      "op": "bz execute_clauses_for_event_after_if_else@12",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0"
      ]
    },
    "1130": {
      "op": "frame_dig 0",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "box_prefixed_key%4#0"
      ]
    },
    "1132": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#11",
        "i#0",
        "maybe_exists%5#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_struct#0",
        "maybe_exists%5#0"
      ]
    },
    "1133": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "maybe_exists%5#0",
        "clause_struct#0"
      ]
    },
    "1134": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "maybe_exists%5#0",
        "clause_struct#0",
        "clause_struct#0 (copy)"
      ]
    },
    "1135": {
      "op": "cover 2",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_struct#0",
        "maybe_exists%5#0",
        "clause_struct#0"
      ]
    },
    "1137": {
      "op": "frame_bury 2",
      "defined_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#11",
        "i#0",
        "maybe_exists%5#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_struct#0",
        "maybe_exists%5#0"
      ]
    },
    "1139": {
      "error": "check self.conditional_clauses entry exists",
      "op": "assert // check self.conditional_clauses entry exists",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_struct#0"
      ]
    },
    "1140": {
      "op": "intc 4 // 960",
      "defined_out": [
        "960",
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_struct#0",
        "960"
      ]
    },
    "1142": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#11",
        "i#0",
        "is_true%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "is_true%1#0"
      ]
    },
    "1143": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#11",
        "i#0",
        "is_true%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "is_true%1#0",
        "0x00"
      ]
    },
    "1144": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "is_true%1#0",
        "0x00",
        "0"
      ]
    },
    "1145": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "0x00",
        "0",
        "is_true%1#0"
      ]
    },
    "1147": {
      "op": "setbit",
      "defined_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "encoded_bool%1#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "encoded_bool%1#0"
      ]
    },
    "1148": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "1149": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "tmp%3#0"
      ]
    },
    "1150": {
      "op": "bnz execute_clauses_for_event_for_footer@13",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0"
      ]
    },
    "1153": {
      "op": "frame_dig 7",
      "defined_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "event_struct#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "event_struct#0"
      ]
    },
    "1155": {
      "op": "intc_3 // 81",
      "defined_out": [
        "81",
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "event_struct#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "event_struct#0",
        "81"
      ]
    },
    "1156": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "event_struct#0",
        "executed_count#11",
        "i#0",
        "is_true%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "is_true%2#0"
      ]
    },
    "1157": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "is_true%2#0",
        "0x00"
      ]
    },
    "1158": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "is_true%2#0",
        "0x00",
        "0"
      ]
    },
    "1159": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "0x00",
        "0",
        "is_true%2#0"
      ]
    },
    "1161": {
      "op": "setbit",
      "defined_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "encoded_bool%2#0",
        "event_struct#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "encoded_bool%2#0"
      ]
    },
    "1162": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "encoded_bool%2#0",
        "0"
      ]
    },
    "1163": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "event_struct#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "tmp%4#0"
      ]
    },
    "1164": {
      "op": "bz execute_clauses_for_event_else_body@9",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0"
      ]
    },
    "1167": {
      "op": "frame_dig 2",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_struct#0"
      ]
    },
    "1169": {
      "error": "Index access is out of bounds",
      "op": "extract 24 32 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "event_struct#0",
        "executed_count#11",
        "i#0",
        "recipient#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "recipient#0"
      ]
    },
    "1172": {
      "block": "execute_clauses_for_event_after_if_else@10",
      "stack_in": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "recipient#0"
      ],
      "op": "itxn_begin"
    },
    "1173": {
      "op": "frame_dig 2",
      "defined_out": [
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "recipient#0",
        "clause_struct#0"
      ]
    },
    "1175": {
      "op": "dup",
      "defined_out": [
        "clause_struct#0",
        "clause_struct#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "recipient#0",
        "clause_struct#0",
        "clause_struct#0 (copy)"
      ]
    },
    "1176": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "clause_struct#0",
        "clause_struct#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "recipient#0",
        "clause_struct#0",
        "clause_struct#0 (copy)",
        "16"
      ]
    },
    "1178": {
      "op": "extract_uint64",
      "defined_out": [
        "clause_struct#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "recipient#0",
        "clause_struct#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "1179": {
      "op": "uncover 2",
      "defined_out": [
        "clause_struct#0",
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "recipient#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_struct#0",
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "recipient#0"
      ]
    },
    "1181": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_struct#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "1183": {
      "op": "itxn_field Amount",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_struct#0"
      ]
    },
    "1185": {
      "op": "intc_1 // pay",
      "defined_out": [
        "clause_struct#0",
        "pay"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_struct#0",
        "pay"
      ]
    },
    "1186": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_struct#0"
      ]
    },
    "1188": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_struct#0",
        "0"
      ]
    },
    "1189": {
      "op": "itxn_field Fee",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_struct#0"
      ]
    },
    "1191": {
      "op": "itxn_submit"
    },
    "1192": {
      "op": "intc 4 // 960",
      "defined_out": [
        "960",
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_struct#0",
        "960"
      ]
    },
    "1194": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "960",
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_struct#0",
        "960",
        "1"
      ]
    },
    "1195": {
      "op": "setbit",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_struct#0"
      ]
    },
    "1196": {
      "op": "frame_dig 0",
      "defined_out": [
        "box_prefixed_key%4#0",
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_struct#0",
        "box_prefixed_key%4#0"
      ]
    },
    "1198": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "box_prefixed_key%4#0",
        "clause_struct#0"
      ]
    },
    "1199": {
      "op": "box_put",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0"
      ]
    },
    "1200": {
      "op": "frame_dig 3",
      "defined_out": [
        "box_prefixed_key%4#0",
        "clause_struct#0",
        "executed_count#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "executed_count#0"
      ]
    },
    "1202": {
      "op": "btoi",
      "defined_out": [
        "box_prefixed_key%4#0",
        "clause_struct#0",
        "executed_count#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "tmp%6#0"
      ]
    },
    "1203": {
      "op": "intc_1 // 1",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "tmp%6#0",
        "1"
      ]
    },
    "1204": {
      "op": "+",
      "defined_out": [
        "box_prefixed_key%4#0",
        "clause_struct#0",
        "executed_count#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "to_encode%0#0"
      ]
    },
    "1205": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%4#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "executed_count#11"
      ]
    },
    "1206": {
      "op": "frame_bury 4",
      "defined_out": [
        "box_prefixed_key%4#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0"
      ]
    },
    "1208": {
      "block": "execute_clauses_for_event_after_if_else@12",
      "stack_in": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "executed_count#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "executed_count#0"
      ]
    },
    "1210": {
      "op": "frame_bury 3",
      "defined_out": [
        "executed_count#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0"
      ]
    },
    "1212": {
      "block": "execute_clauses_for_event_for_footer@13",
      "stack_in": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "i#0"
      ]
    },
    "1214": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "i#0",
        "1"
      ]
    },
    "1215": {
      "op": "+",
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "i#0"
      ]
    },
    "1216": {
      "op": "frame_bury 5",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0"
      ]
    },
    "1218": {
      "op": "b execute_clauses_for_event_for_header@3"
    },
    "1221": {
      "block": "execute_clauses_for_event_else_body@9",
      "stack_in": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "clause_struct#0"
      ]
    },
    "1223": {
      "error": "Index access is out of bounds",
      "op": "extract 56 32 // on error: Index access is out of bounds",
      "defined_out": [
        "clause_struct#0",
        "recipient#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "recipient#0"
      ]
    },
    "1226": {
      "op": "b execute_clauses_for_event_after_if_else@10"
    },
    "1229": {
      "block": "execute_clauses_for_event_after_for@14",
      "stack_in": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "executed_count#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0",
        "clause_ids#0",
        "clause_struct#0",
        "executed_count#0",
        "executed_count#11",
        "i#0",
        "tmp%2#0",
        "event_struct#0",
        "box_prefixed_key%2#0",
        "executed_count#0"
      ]
    },
    "1231": {
      "op": "frame_bury 0"
    },
    "1233": {
      "retsub": true,
      "op": "retsub"
    },
    "1234": {
      "subroutine": "smart_contracts.responsive_donation.contract.ResponsiveDonation.get_event_info",
      "params": {
        "event_id#0": "bytes"
      },
      "block": "get_event_info",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1237": {
      "op": "bytec_2 // \"events\"",
      "defined_out": [
        "\"events\""
      ],
      "stack_out": [
        "\"events\""
      ]
    },
    "1238": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"events\"",
        "event_id#0 (copy)"
      ],
      "stack_out": [
        "\"events\"",
        "event_id#0 (copy)"
      ]
    },
    "1240": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1241": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1242": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1243": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1245": {
      "error": "Event does not exist",
      "op": "assert // Event does not exist",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1246": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "1247": {
      "error": "check self.listed_events entry exists",
      "op": "assert // check self.listed_events entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1248": {
      "retsub": true,
      "op": "retsub"
    },
    "1249": {
      "subroutine": "smart_contracts.responsive_donation.contract.ResponsiveDonation.get_clause_info",
      "params": {
        "clause_id#0": "bytes"
      },
      "block": "get_clause_info",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1252": {
      "op": "bytec_3 // \"clauses\"",
      "defined_out": [
        "\"clauses\""
      ],
      "stack_out": [
        "\"clauses\""
      ]
    },
    "1253": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"clauses\"",
        "clause_id#0 (copy)"
      ],
      "stack_out": [
        "\"clauses\"",
        "clause_id#0 (copy)"
      ]
    },
    "1255": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1256": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1257": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1258": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1260": {
      "error": "Clause does not exist",
      "op": "assert // Clause does not exist",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1261": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "1262": {
      "error": "check self.conditional_clauses entry exists",
      "op": "assert // check self.conditional_clauses entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1263": {
      "retsub": true,
      "op": "retsub"
    },
    "1264": {
      "subroutine": "smart_contracts.responsive_donation.contract.ResponsiveDonation.get_clauses_for_event",
      "params": {
        "event_id#0": "bytes"
      },
      "block": "get_clauses_for_event",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1267": {
      "op": "bytec 4 // \"event_clauses\"",
      "defined_out": [
        "\"event_clauses\""
      ],
      "stack_out": [
        "\"event_clauses\""
      ]
    },
    "1269": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"event_clauses\"",
        "event_id#0 (copy)"
      ],
      "stack_out": [
        "\"event_clauses\"",
        "event_id#0 (copy)"
      ]
    },
    "1271": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1272": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1273": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1274": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1276": {
      "op": "bz get_clauses_for_event_else_body@2",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1279": {
      "op": "frame_dig 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1281": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "1282": {
      "error": "check self.event_clauses entry exists",
      "op": "assert // check self.event_clauses entry exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_value%0#0"
      ]
    },
    "1283": {
      "op": "swap"
    },
    "1284": {
      "retsub": true,
      "op": "retsub"
    },
    "1285": {
      "block": "get_clauses_for_event_else_body@2",
      "stack_in": [
        "box_prefixed_key%0#0"
      ],
      "op": "pushbytes 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "0x0000"
      ]
    },
    "1289": {
      "op": "swap"
    },
    "1290": {
      "retsub": true,
      "op": "retsub"
    }
  }
}